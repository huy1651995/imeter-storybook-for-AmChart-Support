{"version":3,"file":"charts-MassExcludedChart-MassExludedChart-stories.834ec781e65da33e44e1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAUA;AAGA;AAOA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://imeter-storybook/./stories/charts/MassExcludedChart/hooks/useLineChart.ts"],"sourcesContent":["import { useRef, useLayoutEffect } from 'react';\nimport * as amCore from '@amcharts/amcharts5';\nimport * as amLine from '@amcharts/amcharts5/xy';\nimport amAnimatedTheme from '@amcharts/amcharts5/themes/Animated';\nimport amMaterialTheme from '@amcharts/amcharts5/themes/Material';\nimport amDarkTheme from '@amcharts/amcharts5/themes/Dark';\nimport am5themes_Micro from \"@amcharts/amcharts5/themes/Micro\";\n\n\nimport type { Series } from '../types';\nimport {  YAxesMinMax } from '../types';\n\n\namCore.addLicense('AM5C288236420');\n\n\nconst useLineChart = (\n   chartDiv: string,\n   chartData: Array<Series>,\n   yAxisMinMax: YAxesMinMax | undefined,\n\n) => {\n\n   const chartRef = useRef<amLine.XYChart>();\n\n   useLayoutEffect(() => {\n      // Create chart\n      const root = amCore.Root.new(chartDiv);\n      root.setThemes([\n         amAnimatedTheme.new(root),\n      ]);\n\n      const chart = root.container.children.push(\n         amLine.XYChart.new(root, {\n            panX: false,\n            panY: false,\n            wheelX: 'panX',\n            wheelY: 'panX',\n            maxTooltipDistance: -1,\n            paddingTop: 25,\n         })\n      );\n\n      chart.plotContainer.events.on('wheel', (ev) => {\n         if (ev.originalEvent.ctrlKey) {\n            //! If control key is pressed we change behavior to zoom Y axis\n            chart.set('wheelY', 'zoomY');\n         } else {\n            chart.set('wheelY', 'panX');\n         }\n      });\n      //* Creating Axes and Series\n      const xAxis = chart.xAxes.push(\n         amLine.DateAxis.new(root, {\n            maxDeviation: 0.2,\n            renderer: amLine.AxisRendererX.new(root, {\n               cellStartLocation: 0.2,\n               cellEndLocation: 0.8,\n            }),\n            // @ts-ignore\n            baseInterval: {\n               \"timeUnit\": \"minute\",\n               \"count\": 5\n           }\n         })\n      );\n\n      const yAxis = chart.yAxes.push(\n         amLine.ValueAxis.new(root, {\n            renderer: amLine.AxisRendererY.new(root, {}),\n         })\n      );\n\n      const rightYAxis = chart.yAxes.push(\n         amLine.ValueAxis.new(root, {\n            renderer: amLine.AxisRendererY.new(root, {\n               opposite: true,\n            }),\n         })\n      );\n\n      const cursor = chart.set(\n         'cursor',\n         amLine.XYCursor.new(root, {\n            behavior: 'zoomX',\n         })\n      );\n\n      cursor.lineY.set('visible', false);\n      root.numberFormatter.set('numberFormat', '#.##');\n      chartRef.current = chart;\n\n      if (chartData.length > 0 && yAxisMinMax) {\n         const yAxesValues: Record<'left' | 'right', number[]> = {\n            left: [],\n            right: [],\n         };\n         chartData.forEach(\n            ({ name: seriesName, displayName, data, rightAxis: isOnRightAxis }: Series, i) => {\n               const valueAxis = isOnRightAxis ? 'right' : 'left';\n               yAxesValues[valueAxis] = yAxesValues[valueAxis].concat(\n                  data.map((d) => Number(d.value))\n               );\n\n               const axisSeries = chart.series.push(\n                  amLine.SmoothedXLineSeries.new(root, {\n                     name: displayName,\n                     valueXField: 'date',\n                     valueYField: 'value',\n                     xAxis,\n                     yAxis: isOnRightAxis && rightYAxis ? rightYAxis : yAxis,\n                     tooltip: amCore.Tooltip.new(root, {\n                        pointerOrientation: 'down',\n                        autoTextColor: true,\n                        labelText: '{name}:\\t[bold]{valueY}',\n                     }),\n                  })\n               );\n\n               axisSeries.data.setAll(data);\n               axisSeries.appear();\n               axisSeries.strokes.template.set('strokeWidth', 2);\n            }\n         );\n      }\n\n      return () => {\n         root.dispose();\n      };\n   }, [chartData]);\nreturn chartRef.current;\n};\n\nexport { useLineChart };\n"],"names":[],"sourceRoot":""}