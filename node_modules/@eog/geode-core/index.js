import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { setOpacity as setOpacity$1, geodeColors } from '@eog/geode-colors';
import { makeStyles, createStyles, Button, IconButton, Menu, ListItemIcon, Typography, MenuItem, Card, CardContent, CardHeader, Collapse, CardActions, Divider, Grid, InputBase, InputAdornment, TextField as TextField$2, CircularProgress, InputLabel, Checkbox, Radio, Switch, Slider, SvgIcon, Avatar, useTheme, Chip, Box, Badge, ListItem, ListItemText, List, ListSubheader, Tooltip, ListItemAvatar, Drawer, Fade, Hidden, Toolbar, useMediaQuery, AppBar, Step, StepLabel, StepButton, Stepper, Tabs, Tab, Snackbar } from '@material-ui/core';
import React, { forwardRef } from 'react';
import { useHistory } from 'react-router-dom';
import { makeStyles as makeStyles$1, createStyles as createStyles$1 } from '@material-ui/core/styles';
import ChevronRight from '@material-ui/icons/ChevronRight';
import { ArrowVarianceDown, Magnifyglass, XmarkCircleFill, Minus, Plus, Square, CheckmarkSquareFill, MinusSquareFill, PersonFill, Arrow2ExpandCollapse, Arrow2Expand, EogLogoCircleFill, ExclamationmarkTriangleFill, CheckmarkCircleFill, Checkmark } from '@eog/geode-iconsv3';
import { ToggleButtonGroup, ToggleButton, TreeView, TreeItem } from '@material-ui/lab';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import MUIAutocomplete from '@material-ui/lab/Autocomplete';
import MenuIcon from '@material-ui/icons/Menu';
import PersonIcon from '@material-ui/icons/Person';
import useResizeObserver from 'use-resize-observer';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global$e =
  // eslint-disable-next-line es-x/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();

var objectGetOwnPropertyDescriptor = {};

var fails$j = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

var fails$i = fails$j;

// Detect IE8's incomplete defineProperty implementation
var descriptors = !fails$i(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});

var fails$h = fails$j;

var functionBindNative = !fails$h(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

var NATIVE_BIND$2 = functionBindNative;

var call$b = Function.prototype.call;

var functionCall = NATIVE_BIND$2 ? call$b.bind(call$b) : function () {
  return call$b.apply(call$b, arguments);
};

var objectPropertyIsEnumerable = {};

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$1(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

var createPropertyDescriptor$4 = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var NATIVE_BIND$1 = functionBindNative;

var FunctionPrototype$2 = Function.prototype;
var bind = FunctionPrototype$2.bind;
var call$a = FunctionPrototype$2.call;
var uncurryThis$i = NATIVE_BIND$1 && bind.bind(call$a, call$a);

var functionUncurryThis = NATIVE_BIND$1 ? function (fn) {
  return fn && uncurryThis$i(fn);
} : function (fn) {
  return fn && function () {
    return call$a.apply(fn, arguments);
  };
};

var uncurryThis$h = functionUncurryThis;

var toString$8 = uncurryThis$h({}.toString);
var stringSlice$4 = uncurryThis$h(''.slice);

var classofRaw$1 = function (it) {
  return stringSlice$4(toString$8(it), 8, -1);
};

var uncurryThis$g = functionUncurryThis;
var fails$g = fails$j;
var classof$5 = classofRaw$1;

var $Object$4 = Object;
var split = uncurryThis$g(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var indexedObject = fails$g(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object$4('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof$5(it) == 'String' ? split(it, '') : $Object$4(it);
} : $Object$4;

var $TypeError$8 = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
var requireObjectCoercible$7 = function (it) {
  if (it == undefined) throw $TypeError$8("Can't call method on " + it);
  return it;
};

// toObject with fallback for non-array-like ES3 strings
var IndexedObject$1 = indexedObject;
var requireObjectCoercible$6 = requireObjectCoercible$7;

var toIndexedObject$5 = function (it) {
  return IndexedObject$1(requireObjectCoercible$6(it));
};

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
var isCallable$h = function (argument) {
  return typeof argument == 'function';
};

var isCallable$g = isCallable$h;

var isObject$6 = function (it) {
  return typeof it == 'object' ? it !== null : isCallable$g(it);
};

var global$d = global$e;
var isCallable$f = isCallable$h;

var aFunction = function (argument) {
  return isCallable$f(argument) ? argument : undefined;
};

var getBuiltIn$5 = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global$d[namespace]) : global$d[namespace] && global$d[namespace][method];
};

var uncurryThis$f = functionUncurryThis;

var objectIsPrototypeOf = uncurryThis$f({}.isPrototypeOf);

var getBuiltIn$4 = getBuiltIn$5;

var engineUserAgent = getBuiltIn$4('navigator', 'userAgent') || '';

var global$c = global$e;
var userAgent$1 = engineUserAgent;

var process = global$c.process;
var Deno = global$c.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent$1) {
  match = userAgent$1.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent$1.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

var engineV8Version = version;

/* eslint-disable es-x/no-symbol -- required for testing */

var V8_VERSION = engineV8Version;
var fails$f = fails$j;

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$f(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

/* eslint-disable es-x/no-symbol -- required for testing */

var NATIVE_SYMBOL$1 = nativeSymbol;

var useSymbolAsUid = NATIVE_SYMBOL$1
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';

var getBuiltIn$3 = getBuiltIn$5;
var isCallable$e = isCallable$h;
var isPrototypeOf$1 = objectIsPrototypeOf;
var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

var $Object$3 = Object;

var isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn$3('Symbol');
  return isCallable$e($Symbol) && isPrototypeOf$1($Symbol.prototype, $Object$3(it));
};

var $String$3 = String;

var tryToString$2 = function (argument) {
  try {
    return $String$3(argument);
  } catch (error) {
    return 'Object';
  }
};

var isCallable$d = isCallable$h;
var tryToString$1 = tryToString$2;

var $TypeError$7 = TypeError;

// `Assert: IsCallable(argument) is true`
var aCallable$1 = function (argument) {
  if (isCallable$d(argument)) return argument;
  throw $TypeError$7(tryToString$1(argument) + ' is not a function');
};

var aCallable = aCallable$1;

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
var getMethod$2 = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};

var call$9 = functionCall;
var isCallable$c = isCallable$h;
var isObject$5 = isObject$6;

var $TypeError$6 = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
var ordinaryToPrimitive$1 = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable$c(fn = input.toString) && !isObject$5(val = call$9(fn, input))) return val;
  if (isCallable$c(fn = input.valueOf) && !isObject$5(val = call$9(fn, input))) return val;
  if (pref !== 'string' && isCallable$c(fn = input.toString) && !isObject$5(val = call$9(fn, input))) return val;
  throw $TypeError$6("Can't convert object to primitive value");
};

var shared$4 = {exports: {}};

var global$b = global$e;

// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty$5 = Object.defineProperty;

var defineGlobalProperty$3 = function (key, value) {
  try {
    defineProperty$5(global$b, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global$b[key] = value;
  } return value;
};

var global$a = global$e;
var defineGlobalProperty$2 = defineGlobalProperty$3;

var SHARED = '__core-js_shared__';
var store$3 = global$a[SHARED] || defineGlobalProperty$2(SHARED, {});

var sharedStore = store$3;

var store$2 = sharedStore;

(shared$4.exports = function (key, value) {
  return store$2[key] || (store$2[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.24.1',
  mode: 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});

var requireObjectCoercible$5 = requireObjectCoercible$7;

var $Object$2 = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
var toObject$3 = function (argument) {
  return $Object$2(requireObjectCoercible$5(argument));
};

var uncurryThis$e = functionUncurryThis;
var toObject$2 = toObject$3;

var hasOwnProperty = uncurryThis$e({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe
var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject$2(it), key);
};

var uncurryThis$d = functionUncurryThis;

var id = 0;
var postfix = Math.random();
var toString$7 = uncurryThis$d(1.0.toString);

var uid$2 = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$7(++id + postfix, 36);
};

var global$9 = global$e;
var shared$3 = shared$4.exports;
var hasOwn$9 = hasOwnProperty_1;
var uid$1 = uid$2;
var NATIVE_SYMBOL = nativeSymbol;
var USE_SYMBOL_AS_UID = useSymbolAsUid;

var WellKnownSymbolsStore = shared$3('wks');
var Symbol$1 = global$9.Symbol;
var symbolFor = Symbol$1 && Symbol$1['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;

var wellKnownSymbol$b = function (name) {
  if (!hasOwn$9(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn$9(Symbol$1, name)) {
      WellKnownSymbolsStore[name] = Symbol$1[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};

var call$8 = functionCall;
var isObject$4 = isObject$6;
var isSymbol$1 = isSymbol$2;
var getMethod$1 = getMethod$2;
var ordinaryToPrimitive = ordinaryToPrimitive$1;
var wellKnownSymbol$a = wellKnownSymbol$b;

var $TypeError$5 = TypeError;
var TO_PRIMITIVE = wellKnownSymbol$a('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
var toPrimitive$1 = function (input, pref) {
  if (!isObject$4(input) || isSymbol$1(input)) return input;
  var exoticToPrim = getMethod$1(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call$8(exoticToPrim, input, pref);
    if (!isObject$4(result) || isSymbol$1(result)) return result;
    throw $TypeError$5("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

var toPrimitive = toPrimitive$1;
var isSymbol = isSymbol$2;

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
var toPropertyKey$3 = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

var global$8 = global$e;
var isObject$3 = isObject$6;

var document$1 = global$8.document;
// typeof document.createElement is 'object' in old IE
var EXISTS$1 = isObject$3(document$1) && isObject$3(document$1.createElement);

var documentCreateElement$2 = function (it) {
  return EXISTS$1 ? document$1.createElement(it) : {};
};

var DESCRIPTORS$9 = descriptors;
var fails$e = fails$j;
var createElement = documentCreateElement$2;

// Thanks to IE8 for its funny defineProperty
var ie8DomDefine = !DESCRIPTORS$9 && !fails$e(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

var DESCRIPTORS$8 = descriptors;
var call$7 = functionCall;
var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
var createPropertyDescriptor$3 = createPropertyDescriptor$4;
var toIndexedObject$4 = toIndexedObject$5;
var toPropertyKey$2 = toPropertyKey$3;
var hasOwn$8 = hasOwnProperty_1;
var IE8_DOM_DEFINE$1 = ie8DomDefine;

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
objectGetOwnPropertyDescriptor.f = DESCRIPTORS$8 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject$4(O);
  P = toPropertyKey$2(P);
  if (IE8_DOM_DEFINE$1) try {
    return $getOwnPropertyDescriptor$1(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn$8(O, P)) return createPropertyDescriptor$3(!call$7(propertyIsEnumerableModule$1.f, O, P), O[P]);
};

var objectDefineProperty = {};

var DESCRIPTORS$7 = descriptors;
var fails$d = fails$j;

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
var v8PrototypeDefineBug = DESCRIPTORS$7 && fails$d(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});

var isObject$2 = isObject$6;

var $String$2 = String;
var $TypeError$4 = TypeError;

// `Assert: Type(argument) is Object`
var anObject$a = function (argument) {
  if (isObject$2(argument)) return argument;
  throw $TypeError$4($String$2(argument) + ' is not an object');
};

var DESCRIPTORS$6 = descriptors;
var IE8_DOM_DEFINE = ie8DomDefine;
var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
var anObject$9 = anObject$a;
var toPropertyKey$1 = toPropertyKey$3;

var $TypeError$3 = TypeError;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE$1 = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
objectDefineProperty.f = DESCRIPTORS$6 ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
  anObject$9(O);
  P = toPropertyKey$1(P);
  anObject$9(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject$9(O);
  P = toPropertyKey$1(P);
  anObject$9(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError$3('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

var DESCRIPTORS$5 = descriptors;
var definePropertyModule$4 = objectDefineProperty;
var createPropertyDescriptor$2 = createPropertyDescriptor$4;

var createNonEnumerableProperty$5 = DESCRIPTORS$5 ? function (object, key, value) {
  return definePropertyModule$4.f(object, key, createPropertyDescriptor$2(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var makeBuiltIn$2 = {exports: {}};

var DESCRIPTORS$4 = descriptors;
var hasOwn$7 = hasOwnProperty_1;

var FunctionPrototype$1 = Function.prototype;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS$4 && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn$7(FunctionPrototype$1, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS$4 || (DESCRIPTORS$4 && getDescriptor(FunctionPrototype$1, 'name').configurable));

var functionName = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

var uncurryThis$c = functionUncurryThis;
var isCallable$b = isCallable$h;
var store$1 = sharedStore;

var functionToString = uncurryThis$c(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable$b(store$1.inspectSource)) {
  store$1.inspectSource = function (it) {
    return functionToString(it);
  };
}

var inspectSource$3 = store$1.inspectSource;

var global$7 = global$e;
var isCallable$a = isCallable$h;
var inspectSource$2 = inspectSource$3;

var WeakMap$1 = global$7.WeakMap;

var nativeWeakMap = isCallable$a(WeakMap$1) && /native code/.test(inspectSource$2(WeakMap$1));

var shared$2 = shared$4.exports;
var uid = uid$2;

var keys = shared$2('keys');

var sharedKey$3 = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

var hiddenKeys$4 = {};

var NATIVE_WEAK_MAP = nativeWeakMap;
var global$6 = global$e;
var uncurryThis$b = functionUncurryThis;
var isObject$1 = isObject$6;
var createNonEnumerableProperty$4 = createNonEnumerableProperty$5;
var hasOwn$6 = hasOwnProperty_1;
var shared$1 = sharedStore;
var sharedKey$2 = sharedKey$3;
var hiddenKeys$3 = hiddenKeys$4;

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError$1 = global$6.TypeError;
var WeakMap = global$6.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject$1(it) || (state = get(it)).type !== TYPE) {
      throw TypeError$1('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared$1.state) {
  var store = shared$1.state || (shared$1.state = new WeakMap());
  var wmget = uncurryThis$b(store.get);
  var wmhas = uncurryThis$b(store.has);
  var wmset = uncurryThis$b(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey$2('state');
  hiddenKeys$3[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn$6(it, STATE)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty$4(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn$6(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn$6(it, STATE);
  };
}

var internalState = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

var fails$c = fails$j;
var isCallable$9 = isCallable$h;
var hasOwn$5 = hasOwnProperty_1;
var DESCRIPTORS$3 = descriptors;
var CONFIGURABLE_FUNCTION_NAME$1 = functionName.CONFIGURABLE;
var inspectSource$1 = inspectSource$3;
var InternalStateModule$1 = internalState;

var enforceInternalState = InternalStateModule$1.enforce;
var getInternalState$2 = InternalStateModule$1.get;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty$4 = Object.defineProperty;

var CONFIGURABLE_LENGTH = DESCRIPTORS$3 && !fails$c(function () {
  return defineProperty$4(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn$1 = makeBuiltIn$2.exports = function (value, name, options) {
  if (String(name).slice(0, 7) === 'Symbol(') {
    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn$5(value, 'name') || (CONFIGURABLE_FUNCTION_NAME$1 && value.name !== name)) {
    if (DESCRIPTORS$3) defineProperty$4(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn$5(options, 'arity') && value.length !== options.arity) {
    defineProperty$4(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn$5(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS$3) defineProperty$4(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn$5(state, 'source')) {
    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn$1(function toString() {
  return isCallable$9(this) && getInternalState$2(this).source || inspectSource$1(this);
}, 'toString');

var isCallable$8 = isCallable$h;
var definePropertyModule$3 = objectDefineProperty;
var makeBuiltIn = makeBuiltIn$2.exports;
var defineGlobalProperty$1 = defineGlobalProperty$3;

var defineBuiltIn$5 = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable$8(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty$1(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule$3.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};

var objectGetOwnPropertyNames = {};

var ceil$1 = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es-x/no-math-trunc -- safe
var mathTrunc = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil$1)(n);
};

var trunc = mathTrunc;

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
var toIntegerOrInfinity$4 = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};

var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;

var max$1 = Math.max;
var min$2 = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
var toAbsoluteIndex$2 = function (index, length) {
  var integer = toIntegerOrInfinity$3(index);
  return integer < 0 ? max$1(integer + length, 0) : min$2(integer, length);
};

var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;

var min$1 = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
var toLength$3 = function (argument) {
  return argument > 0 ? min$1(toIntegerOrInfinity$2(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

var toLength$2 = toLength$3;

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
var lengthOfArrayLike$2 = function (obj) {
  return toLength$2(obj.length);
};

var toIndexedObject$3 = toIndexedObject$5;
var toAbsoluteIndex$1 = toAbsoluteIndex$2;
var lengthOfArrayLike$1 = lengthOfArrayLike$2;

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod$3 = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject$3($this);
    var length = lengthOfArrayLike$1(O);
    var index = toAbsoluteIndex$1(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

var arrayIncludes = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod$3(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod$3(false)
};

var uncurryThis$a = functionUncurryThis;
var hasOwn$4 = hasOwnProperty_1;
var toIndexedObject$2 = toIndexedObject$5;
var indexOf$1 = arrayIncludes.indexOf;
var hiddenKeys$2 = hiddenKeys$4;

var push$1 = uncurryThis$a([].push);

var objectKeysInternal = function (object, names) {
  var O = toIndexedObject$2(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn$4(hiddenKeys$2, key) && hasOwn$4(O, key) && push$1(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn$4(O, key = names[i++])) {
    ~indexOf$1(result, key) || push$1(result, key);
  }
  return result;
};

// IE8- don't enum bug keys
var enumBugKeys$3 = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

var internalObjectKeys$1 = objectKeysInternal;
var enumBugKeys$2 = enumBugKeys$3;

var hiddenKeys$1 = enumBugKeys$2.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys$1(O, hiddenKeys$1);
};

var objectGetOwnPropertySymbols = {};

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

var getBuiltIn$2 = getBuiltIn$5;
var uncurryThis$9 = functionUncurryThis;
var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
var anObject$8 = anObject$a;

var concat$1 = uncurryThis$9([].concat);

// all object keys, includes non-enumerable and symbols
var ownKeys$1 = getBuiltIn$2('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject$8(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
  return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;
};

var hasOwn$3 = hasOwnProperty_1;
var ownKeys = ownKeys$1;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var definePropertyModule$2 = objectDefineProperty;

var copyConstructorProperties$1 = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule$2.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn$3(target, key) && !(exceptions && hasOwn$3(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

var fails$b = fails$j;
var isCallable$7 = isCallable$h;

var replacement = /#|\.prototype\./;

var isForced$1 = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable$7(detection) ? fails$b(detection)
    : !!detection;
};

var normalize = isForced$1.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced$1.data = {};
var NATIVE = isForced$1.NATIVE = 'N';
var POLYFILL = isForced$1.POLYFILL = 'P';

var isForced_1 = isForced$1;

var global$5 = global$e;
var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
var createNonEnumerableProperty$3 = createNonEnumerableProperty$5;
var defineBuiltIn$4 = defineBuiltIn$5;
var defineGlobalProperty = defineGlobalProperty$3;
var copyConstructorProperties = copyConstructorProperties$1;
var isForced = isForced_1;

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
var _export = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global$5;
  } else if (STATIC) {
    target = global$5[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global$5[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty$3(sourceProperty, 'sham', true);
    }
    defineBuiltIn$4(target, key, sourceProperty, options);
  }
};

var internalObjectKeys = objectKeysInternal;
var enumBugKeys$1 = enumBugKeys$3;

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es-x/no-object-keys -- safe
var objectKeys$2 = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys$1);
};

var DESCRIPTORS$2 = descriptors;
var uncurryThis$8 = functionUncurryThis;
var call$6 = functionCall;
var fails$a = fails$j;
var objectKeys$1 = objectKeys$2;
var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
var propertyIsEnumerableModule = objectPropertyIsEnumerable;
var toObject$1 = toObject$3;
var IndexedObject = indexedObject;

// eslint-disable-next-line es-x/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
var defineProperty$3 = Object.defineProperty;
var concat = uncurryThis$8([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
var objectAssign = !$assign || fails$a(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS$2 && $assign({ b: 1 }, $assign(defineProperty$3({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty$3(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es-x/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject$1(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS$2 || call$6(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;

var $$4 = _export;
var assign = objectAssign;

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es-x/no-object-assign -- required for testing
$$4({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== assign }, {
  assign: assign
});

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

var wellKnownSymbol$9 = wellKnownSymbol$b;

var TO_STRING_TAG$3 = wellKnownSymbol$9('toStringTag');
var test = {};

test[TO_STRING_TAG$3] = 'z';

var toStringTagSupport = String(test) === '[object z]';

var TO_STRING_TAG_SUPPORT = toStringTagSupport;
var isCallable$6 = isCallable$h;
var classofRaw = classofRaw$1;
var wellKnownSymbol$8 = wellKnownSymbol$b;

var TO_STRING_TAG$2 = wellKnownSymbol$8('toStringTag');
var $Object$1 = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
var classof$4 = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object$1(it), TO_STRING_TAG$2)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable$6(O.callee) ? 'Arguments' : result;
};

var classof$3 = classof$4;

var $String$1 = String;

var toString$6 = function (argument) {
  if (classof$3(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String$1(argument);
};

var anObject$7 = anObject$a;

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
var regexpFlags$1 = function () {
  var that = anObject$7(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.unicodeSets) result += 'v';
  if (that.sticky) result += 'y';
  return result;
};

var fails$9 = fails$j;
var global$4 = global$e;

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp$2 = global$4.RegExp;

var UNSUPPORTED_Y$2 = fails$9(function () {
  var re = $RegExp$2('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y$2 || fails$9(function () {
  return !$RegExp$2('a', 'y').sticky;
});

var BROKEN_CARET = UNSUPPORTED_Y$2 || fails$9(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp$2('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

var regexpStickyHelpers = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y$2
};

var objectDefineProperties = {};

var DESCRIPTORS$1 = descriptors;
var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
var definePropertyModule$1 = objectDefineProperty;
var anObject$6 = anObject$a;
var toIndexedObject$1 = toIndexedObject$5;
var objectKeys = objectKeys$2;

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe
objectDefineProperties.f = DESCRIPTORS$1 && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$6(O);
  var props = toIndexedObject$1(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule$1.f(O, key = keys[index++], props[key]);
  return O;
};

var getBuiltIn$1 = getBuiltIn$5;

var html$1 = getBuiltIn$1('document', 'documentElement');

/* global ActiveXObject -- old IE, WSH */

var anObject$5 = anObject$a;
var definePropertiesModule = objectDefineProperties;
var enumBugKeys = enumBugKeys$3;
var hiddenKeys = hiddenKeys$4;
var html = html$1;
var documentCreateElement$1 = documentCreateElement$2;
var sharedKey$1 = sharedKey$3;

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO$1 = sharedKey$1('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement$1('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO$1] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es-x/no-object-create -- safe
var objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject$5(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};

var fails$8 = fails$j;
var global$3 = global$e;

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp$1 = global$3.RegExp;

var regexpUnsupportedDotAll = fails$8(function () {
  var re = $RegExp$1('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});

var fails$7 = fails$j;
var global$2 = global$e;

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global$2.RegExp;

var regexpUnsupportedNcg = fails$7(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call$5 = functionCall;
var uncurryThis$7 = functionUncurryThis;
var toString$5 = toString$6;
var regexpFlags = regexpFlags$1;
var stickyHelpers$1 = regexpStickyHelpers;
var shared = shared$4.exports;
var create$2 = objectCreate;
var getInternalState$1 = internalState.get;
var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
var UNSUPPORTED_NCG = regexpUnsupportedNcg;

var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt$2 = uncurryThis$7(''.charAt);
var indexOf = uncurryThis$7(''.indexOf);
var replace$1 = uncurryThis$7(''.replace);
var stringSlice$3 = uncurryThis$7(''.slice);

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call$5(nativeExec, re1, 'a');
  call$5(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y$1 = stickyHelpers$1.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState$1(re);
    var str = toString$5(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call$5(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y$1 && re.sticky;
    var flags = call$5(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace$1(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice$3(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$2(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = call$5(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice$3(match.input, charsAdded);
        match[0] = stringSlice$3(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn't work for /(.?)?/
      call$5(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create$2(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

var regexpExec$3 = patchedExec;

var $$3 = _export;
var exec$2 = regexpExec$3;

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$$3({ target: 'RegExp', proto: true, forced: /./.exec !== exec$2 }, {
  exec: exec$2
});

var NATIVE_BIND = functionBindNative;

var FunctionPrototype = Function.prototype;
var apply$1 = FunctionPrototype.apply;
var call$4 = FunctionPrototype.call;

// eslint-disable-next-line es-x/no-reflect -- safe
var functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call$4.bind(apply$1) : function () {
  return call$4.apply(apply$1, arguments);
});

// TODO: Remove from `core-js@4` since it's moved to entry points

var uncurryThis$6 = functionUncurryThis;
var defineBuiltIn$3 = defineBuiltIn$5;
var regexpExec$2 = regexpExec$3;
var fails$6 = fails$j;
var wellKnownSymbol$7 = wellKnownSymbol$b;
var createNonEnumerableProperty$2 = createNonEnumerableProperty$5;

var SPECIES$1 = wellKnownSymbol$7('species');
var RegExpPrototype$2 = RegExp.prototype;

var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol$7(KEY);

  var DELEGATES_TO_SYMBOL = !fails$6(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$6(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES$1] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var uncurriedNativeRegExpMethod = uncurryThis$6(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = uncurryThis$6(nativeMethod);
      var $exec = regexp.exec;
      if ($exec === regexpExec$2 || $exec === RegExpPrototype$2.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
        }
        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
      }
      return { done: false };
    });

    defineBuiltIn$3(String.prototype, KEY, methods[0]);
    defineBuiltIn$3(RegExpPrototype$2, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty$2(RegExpPrototype$2[SYMBOL], 'sham', true);
};

var isObject = isObject$6;
var classof$2 = classofRaw$1;
var wellKnownSymbol$6 = wellKnownSymbol$b;

var MATCH = wellKnownSymbol$6('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
var isRegexp = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof$2(it) == 'RegExp');
};

var uncurryThis$5 = functionUncurryThis;
var fails$5 = fails$j;
var isCallable$5 = isCallable$h;
var classof$1 = classof$4;
var getBuiltIn = getBuiltIn$5;
var inspectSource = inspectSource$3;

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec$1 = uncurryThis$5(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable$5(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable$5(argument)) return false;
  switch (classof$1(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec$1(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
var isConstructor$1 = !construct || fails$5(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;

var isConstructor = isConstructor$1;
var tryToString = tryToString$2;

var $TypeError$2 = TypeError;

// `Assert: IsConstructor(argument) is true`
var aConstructor$1 = function (argument) {
  if (isConstructor(argument)) return argument;
  throw $TypeError$2(tryToString(argument) + ' is not a constructor');
};

var anObject$4 = anObject$a;
var aConstructor = aConstructor$1;
var wellKnownSymbol$5 = wellKnownSymbol$b;

var SPECIES = wellKnownSymbol$5('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
var speciesConstructor$1 = function (O, defaultConstructor) {
  var C = anObject$4(O).constructor;
  var S;
  return C === undefined || (S = anObject$4(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
};

var uncurryThis$4 = functionUncurryThis;
var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
var toString$4 = toString$6;
var requireObjectCoercible$4 = requireObjectCoercible$7;

var charAt$1 = uncurryThis$4(''.charAt);
var charCodeAt = uncurryThis$4(''.charCodeAt);
var stringSlice$2 = uncurryThis$4(''.slice);

var createMethod$2 = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString$4(requireObjectCoercible$4($this));
    var position = toIntegerOrInfinity$1(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt$1(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice$2(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

var stringMultibyte = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod$2(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod$2(true)
};

var charAt = stringMultibyte.charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
var advanceStringIndex$1 = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

var toPropertyKey = toPropertyKey$3;
var definePropertyModule = objectDefineProperty;
var createPropertyDescriptor$1 = createPropertyDescriptor$4;

var createProperty$1 = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor$1(0, value));
  else object[propertyKey] = value;
};

var toAbsoluteIndex = toAbsoluteIndex$2;
var lengthOfArrayLike = lengthOfArrayLike$2;
var createProperty = createProperty$1;

var $Array = Array;
var max = Math.max;

var arraySliceSimple = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = $Array(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};

var call$3 = functionCall;
var anObject$3 = anObject$a;
var isCallable$4 = isCallable$h;
var classof = classofRaw$1;
var regexpExec$1 = regexpExec$3;

var $TypeError$1 = TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
var regexpExecAbstract = function (R, S) {
  var exec = R.exec;
  if (isCallable$4(exec)) {
    var result = call$3(exec, R, S);
    if (result !== null) anObject$3(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call$3(regexpExec$1, R, S);
  throw $TypeError$1('RegExp#exec called on incompatible receiver');
};

var apply = functionApply;
var call$2 = functionCall;
var uncurryThis$3 = functionUncurryThis;
var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
var isRegExp = isRegexp;
var anObject$2 = anObject$a;
var requireObjectCoercible$3 = requireObjectCoercible$7;
var speciesConstructor = speciesConstructor$1;
var advanceStringIndex = advanceStringIndex$1;
var toLength$1 = toLength$3;
var toString$3 = toString$6;
var getMethod = getMethod$2;
var arraySlice = arraySliceSimple;
var callRegExpExec = regexpExecAbstract;
var regexpExec = regexpExec$3;
var stickyHelpers = regexpStickyHelpers;
var fails$4 = fails$j;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var MAX_UINT32 = 0xFFFFFFFF;
var min = Math.min;
var $push = [].push;
var exec = uncurryThis$3(/./.exec);
var push = uncurryThis$3($push);
var stringSlice$1 = uncurryThis$3(''.slice);

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails$4(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

// @@split logic
fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = toString$3(requireObjectCoercible$3(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return call$2(nativeSplit, string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = call$2(regexpExec, separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          push(output, stringSlice$1(string, lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !exec(separatorCopy, '')) push(output, '');
      } else push(output, stringSlice$1(string, lastLastIndex));
      return output.length > lim ? arraySlice(output, 0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : call$2(nativeSplit, this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible$3(this);
      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
      return splitter
        ? call$2(splitter, separator, O, limit)
        : call$2(internalSplit, toString$3(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (string, limit) {
      var rx = anObject$2(this);
      var S = toString$3(string);
      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

      if (res.done) return res.value;

      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (UNSUPPORTED_Y ? 'g' : 'y');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice$1(S, q) : S);
        var e;
        if (
          z === null ||
          (e = min(toLength$1(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          push(A, stringSlice$1(S, p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            push(A, z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      push(A, stringSlice$1(S, p));
      return A;
    }
  ];
}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

// a string of all valid unicode whitespaces
var whitespaces$2 = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

var uncurryThis$2 = functionUncurryThis;
var requireObjectCoercible$2 = requireObjectCoercible$7;
var toString$2 = toString$6;
var whitespaces$1 = whitespaces$2;

var replace = uncurryThis$2(''.replace);
var whitespace = '[' + whitespaces$1 + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod$1 = function (TYPE) {
  return function ($this) {
    var string = toString$2(requireObjectCoercible$2($this));
    if (TYPE & 1) string = replace(string, ltrim, '');
    if (TYPE & 2) string = replace(string, rtrim, '');
    return string;
  };
};

var stringTrim = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod$1(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod$1(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod$1(3)
};

var PROPER_FUNCTION_NAME$2 = functionName.PROPER;
var fails$3 = fails$j;
var whitespaces = whitespaces$2;

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
var stringTrimForced = function (METHOD_NAME) {
  return fails$3(function () {
    return !!whitespaces[METHOD_NAME]()
      || non[METHOD_NAME]() !== non
      || (PROPER_FUNCTION_NAME$2 && whitespaces[METHOD_NAME].name !== METHOD_NAME);
  });
};

var $$2 = _export;
var $trim = stringTrim.trim;
var forcedStringTrimMethod = stringTrimForced;

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$$2({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});

const getNameInitials = name => {
  const names = name.trim().split(' ');
  const length = names.length;
  let initials = names[0].charAt(0);

  if (length === 1) {
    initials = names[0].charAt(0) + names[0].charAt(1);
  } else if (length > 1) {
    initials = names[0].charAt(0) + names[length - 1].charAt(0);
  }

  return initials.toUpperCase();
};
/**
 * overlayColor: this is painted over the background-color
 * backgroundColor:  this is painted at the bottom of the stack
 */

const getChipOverlayBg = (overlayColor, backgroundColor) => {
  return `linear-gradient(${overlayColor}, ${overlayColor}), linear-gradient(${backgroundColor}, ${backgroundColor});`;
};
function getStatusChipColor(theme, colorOptions) {
  const {
    color,
    isLightMode,
    isIcon,
    isLabel,
    isBadge,
    isBorder,
    isBackground,
    isSelectedBG,
    isSelectedIcon,
    isSelectedLabel,
    isDisabled
  } = colorOptions;

  if (color) {
    if (isLabel || isIcon) {
      if (isDisabled) return theme.palette.text.disabled;
      return isLightMode ? color === 'default' ? theme.palette.customUI.dark : theme.palette[color].dark : color === 'default' ? theme.palette.customUI.main : theme.palette[color].main;
    }

    if (isBorder || isSelectedBG || isBadge) {
      if (isSelectedBG && isDisabled) return theme.palette.action.disabledBackground;
      return color === 'default' ? theme.palette.customUI.main : theme.palette[color].main;
    }

    if (isBackground) {
      if (isDisabled) return theme.palette.action.disabledBackground;
      return color === 'default' ? setOpacity$1(theme.palette.customUI.main, 0.2) : setOpacity$1(theme.palette[color].main, 0.2);
    }

    if (isSelectedLabel || isSelectedIcon) return color === 'default' ? theme.palette.customUI.contrastText : theme.palette[color].contrastText;
  }

  return;
}
function getTagColor(theme, colorOptions) {
  const {
    color,
    variant,
    isLightMode,
    isLabel,
    isBackgroundColor,
    isBorder
  } = colorOptions;

  if (color) {
    if (variant === 'solid') {
      if (isLabel) return color === 'default' ? theme.palette.customUI.contrastText : theme.palette[color].contrastText;
      if (isBackgroundColor) return color === 'default' ? theme.palette.customUI.main : theme.palette[color].main;
    }

    if (variant === 'outlined' || variant === 'tonal') {
      if (isLabel) return isLightMode ? color === 'default' ? theme.palette.customUI.dark : theme.palette[color].dark : color === 'default' ? theme.palette.customUI.main : theme.palette[color].main;
      if (isBackgroundColor) return color === 'default' ? setOpacity$1(theme.palette.customUI.main, 0.25) : setOpacity$1(theme.palette[color].main, 0.25);
    }

    if (isBorder && variant === 'outlined') {
      return color === 'default' ? theme.palette.customUI.main : theme.palette[color].main;
    }
  }

  return;
}

const useStyles$D = makeStyles(theme => createStyles({
  root: ({
    size,
    variant
  }) => ({
    boxShadow: 'none',
    boxSizing: 'border-box',
    height: size === 'small' ? 32 : 36,
    padding: size === 'small' ? variant === 'text' ? theme.spacing(0, 0.75) : theme.spacing(0, 1.5) : variant === 'text' ? theme.spacing(0, 1) : theme.spacing(0, 2),
    textTransform: 'capitalize',
    fontSize: size === 'medium' ? 14 : 12,
    '& .MuiButton-label': {
      alignItems: 'center',
      lineHeight: size === 'small' ? '16px' : '22px'
    },
    '&:hover': {
      boxShadow: variant === 'contained' ? '0px 2px 1px rgba(0, 0, 0, 0.1), 0px 1px 1px rgba(0, 0, 0, 0.07), 0px 1px 3px rgba(0, 0, 0, 0.06)' : 'none'
    },
    '&:active': {
      Opacity: 0.25,
      boxShadow: 'none'
    },
    '&:disabled': {
      backgroundColor: variant === 'contained' ? theme.palette.action.disabled : 'transparent'
    }
  }),
  sizeSmall: {
    '& .MuiButton-iconSizeSmall': {
      width: 18,
      height: 18
    }
  },
  defaultColor: ({
    variant
  }) => ({
    color: variant === 'contained' ? theme.palette.type === 'light' ? theme.palette.customUI.dark : theme.palette.customUI.light : theme.palette.customUI.main,
    backgroundColor: variant === 'contained' ? theme.palette.type === 'light' ? theme.palette.customUI.light : theme.palette.customUI.dark : '',
    borderColor: variant === 'outlined' ? setOpacity$1(theme.palette.customUI.main, 0.6) : '',
    '& .MuiButtonBase-root:hover': {
      backgroundColor: 'none'
    },
    '&:hover': {
      backgroundImage: variant === 'contained' ? getChipOverlayBg(theme.palette.action.hover, theme.palette.type === 'light' ? theme.palette.customUI.light : theme.palette.customUI.dark) : 'none',
      backgroundColor: variant === 'contained' ? theme.palette.type === 'light' ? theme.palette.customUI.light : theme.palette.customUI.dark : '',
      borderColor: variant === 'outlined' ? theme.palette.customUI.main : 'none'
    }
  }),
  startIcon: ({
    disabled,
    variant,
    size
  }) => ({
    color: disabled ? theme.palette.text.disabled : '',
    marginLeft: variant === 'text' ? 0 : theme.spacing(-0.5),
    marginRight: size === 'small' ? theme.spacing(0.75) : theme.spacing(1)
  }),
  endIcon: ({
    disabled,
    variant,
    size
  }) => ({
    color: disabled ? theme.palette.text.disabled : '',
    marginRight: variant === 'text' ? 0 : theme.spacing(-0.5),
    marginLeft: size === 'small' ? theme.spacing(0.75) : theme.spacing(1)
  })
}));

const GeodeButton = _a => {
  var {
    children,
    color = 'primary',
    disabled = false,
    size = 'medium',
    variant = 'text'
  } = _a,
      rest = __rest(_a, ["children", "color", "disabled", "size", "variant"]);

  const classes = useStyles$D({
    color,
    variant,
    disabled,
    size
  });
  return jsx(Button, Object.assign({}, rest, {
    color: color,
    variant: variant,
    size: size,
    disabled: disabled,
    classes: {
      root: clsx(classes.root, {
        [classes.defaultColor]: color === 'default'
      }),
      sizeSmall: classes.sizeSmall,
      startIcon: classes.startIcon,
      endIcon: classes.endIcon
    }
  }, {
    children: children
  }));
};

function getMainColor(theme, colorOptions) {
  const {
    color,
    hover,
    focus,
    disabled,
    error,
    text,
    variant,
    select
  } = colorOptions;

  if (disabled) {
    if (hover) return '';
    return theme.palette.text.disabled;
  }

  if (error) {
    if (hover) return theme.palette.error.dark;
    if (focus) return theme.palette.error.main;
    return theme.palette.error.main;
  }

  if (color) {
    if (hover) {
      if (variant === 'filled') {
        return color === 'default' ? theme.palette.customUI.dark : theme.palette[color].dark;
      }

      return color === 'default' ? theme.palette.customUI.hover : theme.palette[color].hover;
    }

    if (focus) return color === 'default' ? theme.palette.customUI.focused : theme.palette[color].focused;
    if (select) return color === 'default' ? theme.palette.customUI.selected : theme.palette[color].selected;
    return color === 'default' ? theme.palette.customUI.main : theme.palette[color].main;
  }

  if (text) return theme.palette.text[text];
  return;
}

const useStyles$C = makeStyles(theme => createStyles({
  root: ({
    size,
    color,
    variant
  }) => ({
    padding: 6,
    color: variant === 'filled' ? color === 'default' ? theme.palette.customUI.contrastText : theme.palette.primary.contrastText : getMainColor(theme, {
      color
    }),
    backgroundColor: variant === 'filled' ? color === 'default' ? theme.palette.customUI.main : getMainColor(theme, {
      color
    }) : variant === 'tonal' ? setOpacity$1(getMainColor(theme, {
      color
    }), 0.2) : '',
    width: size === 'small' ? 32 : 36,
    height: size === 'small' ? 32 : 36,
    '& .MuiSvgIcon-root': {
      width: size === 'small' ? 20 : 24,
      height: size === 'small' ? 20 : 24
    },
    '&:hover': {
      backgroundColor: variant === 'filled' ? getMainColor(theme, {
        hover: true,
        color,
        variant: 'filled'
      }) : variant === 'tonal' ? setOpacity$1(getMainColor(theme, {
        color
      }), 0.25) : getMainColor(theme, {
        hover: true,
        color
      })
    },
    '&:active': {
      backgroundColor: variant === 'filled' ? color === 'default' ? theme.palette.customUI.main : getMainColor(theme, {
        color
      }) : getMainColor(theme, {
        focus: true,
        color
      })
    },
    '&.Mui-disabled': {
      backgroundColor: variant === 'default' ? 'transparent' : variant === 'filled' ? theme.palette.action.disabled : theme.palette.action.disabledBackground
    }
  }),
  label: {
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center'
  }
}));
const GeodeIconButton = (_a, ref) => {
  var {
    children,
    color = 'default',
    size = 'medium',
    disabled = false,
    variant = 'default'
  } = _a,
      rest = __rest(_a, ["children", "color", "size", "disabled", "variant"]);

  const classes = useStyles$C({
    size,
    color,
    variant,
    disabled
  });
  return jsx(IconButton, Object.assign({
    ref: ref,
    color: undefined,
    disableRipple: variant === 'filled' ? true : false,
    disabled: disabled,
    size: size,
    classes: {
      root: classes.root,
      label: classes.label
    }
  }, rest, {
    children: children
  }));
};
var GeodeIconButton$1 = /*#__PURE__*/React.forwardRef(GeodeIconButton);

const useStyles$B = makeStyles(theme => createStyles({
  root: {
    backgroundColor: 'rgba(0, 0, 0, 0)',
    border: '1px solid rgba(255, 255, 255, .5)',
    color: 'rgba(255, 255, 255, 0.9)',
    padding: ({
      size
    }) => size === 'small' ? '2px 12px' : size === 'medium' ? '6px 16px' : ''
  }
}));

const GeodeContrastButton = _a => {
  var {
    children,
    className,
    disabled = false,
    size = 'medium'
  } = _a,
      rest = __rest(_a, ["children", "className", "disabled", "size"]);

  const classes = useStyles$B({
    size
  });
  return jsx(Button, Object.assign({}, rest, {
    className: clsx(classes.root, className),
    color: undefined,
    variant: 'outlined',
    disabled: disabled,
    size: size
  }, {
    children: children
  }));
};

var wellKnownSymbol$4 = wellKnownSymbol$b;
var create$1 = objectCreate;
var defineProperty$2 = objectDefineProperty.f;

var UNSCOPABLES = wellKnownSymbol$4('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty$2(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create$1(null)
  });
}

// add a key to Array.prototype[@@unscopables]
var addToUnscopables$1 = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

var iterators = {};

var fails$2 = fails$j;

var correctPrototypeGetter = !fails$2(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

var hasOwn$2 = hasOwnProperty_1;
var isCallable$3 = isCallable$h;
var toObject = toObject$3;
var sharedKey = sharedKey$3;
var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es-x/no-object-getprototypeof -- safe
var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn$2(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable$3(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype : null;
};

var fails$1 = fails$j;
var isCallable$2 = isCallable$h;
var getPrototypeOf$1 = objectGetPrototypeOf;
var defineBuiltIn$2 = defineBuiltIn$5;
var wellKnownSymbol$3 = wellKnownSymbol$b;

var ITERATOR$2 = wellKnownSymbol$3('iterator');
var BUGGY_SAFARI_ITERATORS$1 = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es-x/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf$1(getPrototypeOf$1(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$1(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype$2[ITERATOR$2].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable$2(IteratorPrototype$2[ITERATOR$2])) {
  defineBuiltIn$2(IteratorPrototype$2, ITERATOR$2, function () {
    return this;
  });
}

var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$2,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};

var defineProperty$1 = objectDefineProperty.f;
var hasOwn$1 = hasOwnProperty_1;
var wellKnownSymbol$2 = wellKnownSymbol$b;

var TO_STRING_TAG$1 = wellKnownSymbol$2('toStringTag');

var setToStringTag$2 = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn$1(target, TO_STRING_TAG$1)) {
    defineProperty$1(target, TO_STRING_TAG$1, { configurable: true, value: TAG });
  }
};

var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
var create = objectCreate;
var createPropertyDescriptor = createPropertyDescriptor$4;
var setToStringTag$1 = setToStringTag$2;
var Iterators$2 = iterators;

var returnThis$1 = function () { return this; };

var createIteratorConstructor$1 = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype$1, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag$1(IteratorConstructor, TO_STRING_TAG, false);
  Iterators$2[TO_STRING_TAG] = returnThis$1;
  return IteratorConstructor;
};

var isCallable$1 = isCallable$h;

var $String = String;
var $TypeError = TypeError;

var aPossiblePrototype$1 = function (argument) {
  if (typeof argument == 'object' || isCallable$1(argument)) return argument;
  throw $TypeError("Can't set " + $String(argument) + ' as a prototype');
};

/* eslint-disable no-proto -- safe */

var uncurryThis$1 = functionUncurryThis;
var anObject$1 = anObject$a;
var aPossiblePrototype = aPossiblePrototype$1;

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es-x/no-object-setprototypeof -- safe
var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis$1(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject$1(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

var $$1 = _export;
var call$1 = functionCall;
var FunctionName = functionName;
var isCallable = isCallable$h;
var createIteratorConstructor = createIteratorConstructor$1;
var getPrototypeOf = objectGetPrototypeOf;
var setPrototypeOf = objectSetPrototypeOf;
var setToStringTag = setToStringTag$2;
var createNonEnumerableProperty$1 = createNonEnumerableProperty$5;
var defineBuiltIn$1 = defineBuiltIn$5;
var wellKnownSymbol$1 = wellKnownSymbol$b;
var Iterators$1 = iterators;
var IteratorsCore = iteratorsCore;

var PROPER_FUNCTION_NAME$1 = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$1 = wellKnownSymbol$1('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

var defineIterator$1 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$1]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR$1])) {
          defineBuiltIn$1(CurrentIteratorPrototype, ITERATOR$1, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME$1 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty$1(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call$1(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn$1(IterablePrototype, KEY, methods[KEY]);
      }
    } else $$1({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
    defineBuiltIn$1(IterablePrototype, ITERATOR$1, defaultIterator, { name: DEFAULT });
  }
  Iterators$1[NAME] = defaultIterator;

  return methods;
};

var toIndexedObject = toIndexedObject$5;
var addToUnscopables = addToUnscopables$1;
var Iterators = iterators;
var InternalStateModule = internalState;
var defineProperty = objectDefineProperty.f;
var defineIterator = defineIterator$1;
var DESCRIPTORS = descriptors;

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = documentCreateElement$2;

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype$1 = classList && classList.constructor && classList.constructor.prototype;

var domTokenListPrototype = DOMTokenListPrototype$1 === Object.prototype ? undefined : DOMTokenListPrototype$1;

var global$1 = global$e;
var DOMIterables = domIterables;
var DOMTokenListPrototype = domTokenListPrototype;
var ArrayIteratorMethods = es_array_iterator;
var createNonEnumerableProperty = createNonEnumerableProperty$5;
var wellKnownSymbol = wellKnownSymbol$b;

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global$1[COLLECTION_NAME] && global$1[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

const useStyles$A = makeStyles$1(theme => createStyles$1({
  menuPaper: {
    background: theme.palette.background.paper,
    border: theme.palette.borders.divider,
    boxShadow: '0 3px 7px rgb(0 0 0 / 13%), 0 0.6px 2px rgb(0 0 0 / 10%)',
    boxSizing: 'border-box',
    minWidth: '12em'
  },
  menuList: {
    color: theme.palette.text.primary,
    opacity: 0.9
  },
  submenuBtn: {
    padding: theme.spacing(0.75, 2),
    justifyContent: 'space-between',
    pointerEvents: 'auto'
  },
  rightIcon: {
    justifyContent: 'flex-end',
    minWidth: 36
  },
  leftIcon: {
    minWidth: 36,
    color: theme.palette.customUI.main,
    '& .MuiSvgIcon-root': {
      width: '0.8em',
      height: '0.8em'
    }
  },
  menuItem: {
    minHeight: 36,
    '&:hover': {
      backgroundColor: theme.palette.customUI.hover
    },
    '&.Mui-selected': {
      backgroundColor: theme.palette.customUI.selected,
      '&:hover': {
        backgroundColor: theme.palette.customUI.focused
      }
    }
  }
}));
const GeodeMenu = /*#__PURE__*/React.forwardRef((_a, ref) => {
  var {
    id,
    menuButton,
    open,
    anchorEl,
    onClose,
    orientation = 'vertical',
    children,
    className
  } = _a,
      rest = __rest(_a, ["id", "menuButton", "open", "anchorEl", "onClose", "orientation", "children", "className"]);

  const childrenWithNewProps = React.Children.map(children, child => /*#__PURE__*/React.cloneElement(child, {
    onClose: onClose
  }));
  const classes = useStyles$A();
  return jsxs(Fragment, {
    children: [menuButton && menuButton, jsx(Menu, Object.assign({
      id: id ? id : 'popover-menu',
      ref: ref,
      open: open,
      anchorEl: anchorEl,
      getContentAnchorEl: null,
      "aria-owns": anchorEl ? id ? id : 'popover-menu' : undefined,
      "aria-haspopup": "menu",
      anchorOrigin: {
        vertical: orientation === 'vertical' ? 'bottom' : 'top',
        horizontal: orientation === 'vertical' ? 'center' : 'right'
      },
      transformOrigin: {
        vertical: orientation === 'vertical' ? 'top' : 'top',
        horizontal: orientation === 'vertical' ? 'center' : 'left'
      },
      classes: {
        paper: clsx(className, classes.menuPaper),
        list: classes.menuList
      },
      onClose: e => {
        onClose && onClose(e, 'backdropClick');
      },
      disableAutoFocus: true,
      disableAutoFocusItem: true,
      autoFocus: false
    }, rest, {
      children: childrenWithNewProps
    }))]
  });
});
const GeodeSubMenu = _a => {
  var {
    id,
    icon,
    text,
    children,
    onClose,
    className,
    open,
    openMethod = 'click',
    isAllClose,
    setIsAllClose
  } = _a;
      __rest(_a, ["id", "icon", "text", "children", "onClose", "className", "open", "openMethod", "isAllClose", "setIsAllClose"]);

  const classes = useStyles$A();
  const [subAnchorEl, setSubAnchorEl] = React.useState(null);
  const [selected, setSelected] = React.useState(false);
  const [subMenuOpen, setSubMenuOpen] = React.useState(false);

  const handleClick = event => {
    setSubAnchorEl(event.currentTarget);
    setSubMenuOpen(true);
    setSelected(true);
  };

  const handleClose = event => {
    if (onClose) onClose(event);
    setSubMenuOpen(false);
    setSelected(false);
  };

  const handleCurrSubClose = () => {
    setSubMenuOpen(false);
    setSelected(false);
  };

  const handleKeepSubMenuOpen = () => {
    setSubMenuOpen(true);
    setSelected(true);
  };

  React.useEffect(() => {
    if (isAllClose === true) {
      handleCurrSubClose();
    }
  }, [isAllClose, text]);
  const childrenWithNewProps = React.Children.map(children, child => {
    return /*#__PURE__*/React.cloneElement(child, {
      onClose: handleClose,
      style: {
        pointerEvents: 'auto'
      }
    });
  });
  return jsxs(Fragment, {
    children: [jsxs(GeodeMenuItem, Object.assign({
      alignItems: "center",
      selected: selected,
      className: clsx(classes.submenuBtn),
      classes: {
        root: classes.menuItem
      },
      onClick: e => {
        if (openMethod === 'click') {
          handleClick(e);
        }
      },
      onMouseEnter: e => {
        if (openMethod === 'hover') {
          handleClick(e);
        }
      },
      onMouseLeave: handleCurrSubClose,
      autoFocus: false
    }, {
      children: [icon && jsx(ListItemIcon, Object.assign({
        className: classes.leftIcon
      }, {
        children: icon
      })), jsx(Typography, Object.assign({
        variant: "body2"
      }, {
        children: text
      })), jsx(ListItemIcon, Object.assign({
        className: classes.rightIcon
      }, {
        children: jsx(ChevronRight, {})
      }))]
    })), jsx(Menu, Object.assign({
      style: {
        pointerEvents: 'none'
      },
      id: id ? id : 'popover-submenu',
      open: subMenuOpen,
      anchorEl: subAnchorEl,
      getContentAnchorEl: null,
      onClose: handleClose,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: 'left'
      },
      classes: {
        paper: clsx(className, classes.menuPaper),
        list: classes.menuList
      },
      keepMounted: true,
      MenuListProps: {
        onMouseLeave: handleCurrSubClose,
        onMouseEnter: () => handleKeepSubMenuOpen()
      },
      autoFocus: false,
      disableAutoFocus: true,
      disableEnforceFocus: true
    }, {
      children: childrenWithNewProps
    }))]
  });
};
const GeodeMenuItem = /*#__PURE__*/React.forwardRef((_a, ref) => {
  var {
    icon,
    text,
    children,
    pathname,
    button,
    selected = false,
    disabled = false,
    className,
    onClose,
    onClick
  } = _a,
      rest = __rest(_a, ["icon", "text", "children", "pathname", "button", "selected", "disabled", "className", "onClose", "onClick"]);

  const classes = useStyles$A();
  const history = useHistory();

  const handleClick = (path, event) => {
    history.push(path);
    if (onClose) onClose(event);
  };

  return jsxs(MenuItem, Object.assign({
    ref: ref,
    onClick: pathname ? event => {
      handleClick(pathname, event);
      onClick && onClick(event);
    } : onClick ? e => {
      onClick(e);

      if (!disabled) {
        onClose && onClose(e);
      }
    } : e => disabled ? () => null : onClose && onClose(e),
    disabled: disabled,
    selected: selected,
    autoFocus: false,
    className: className,
    classes: {
      root: classes.menuItem
    }
  }, rest, {
    children: [icon && jsx(ListItemIcon, Object.assign({
      className: classes.leftIcon
    }, {
      children: icon
    })), text && jsx(Typography, Object.assign({
      variant: "body2"
    }, {
      children: text
    })), children]
  }));
});

const useStyles$z = makeStyles(theme => createStyles({
  DropdownButton: ({
    variant,
    size
  }) => ({
    width: '100%',
    textTransform: 'none',
    paddingRight: variant === 'text' ? size === 'medium' ? theme.spacing(0.5) : theme.spacing(0.25) : size === 'medium' ? theme.spacing(1) : theme.spacing(0.75),
    '& .MuiButton-endIcon': {
      marginRight: 0,
      marginLeft: size === 'medium' ? theme.spacing(0.5) : theme.spacing(0.25)
    }
  }),
  dropdownMenu: ({
    color,
    size,
    offsetWidth
  }) => ({
    minWidth: offsetWidth,
    '& .MuiMenu-list': {
      maxHeight: 450,
      overflowY: 'scroll',
      '&::-webkit-scrollbar': {
        display: 'none'
      },
      '& p': {
        fontSize: size === 'small' ? 12 : ''
      }
    },
    '& .MuiListItem-root': {
      fontSize: size === 'medium' ? 14 : 12,
      fontWeight: size === 'medium' ? 400 : 500,
      '& .MuiSvgIcon-root': {
        width: size === 'medium' ? 20 : 18,
        height: size === 'medium' ? 20 : 18
      },
      '&:hover': {
        backgroundColor: color === 'default' ? theme.palette.customUI.hover : color === 'primary' ? theme.palette.primary.hover : theme.palette.secondary.hover
      },
      '&.Mui-selected': {
        backgroundColor: color === 'default' ? theme.palette.customUI.selected : color === 'primary' ? theme.palette.primary.selected : theme.palette.secondary.selected,
        '&:hover': {
          backgroundColor: color === 'default' ? theme.palette.customUI.focused : color === 'primary' ? theme.palette.primary.focused : theme.palette.secondary.focused
        }
      }
    }
  })
}));

const DropdownButton = _a => {
  var {
    icon,
    label,
    variant = 'contained',
    size = 'medium',
    color = 'primary',
    children,
    MenuProps
  } = _a,
      rest = __rest(_a, ["icon", "label", "variant", "size", "color", "children", "MenuProps"]);

  const btnRef = React.useRef(null);
  const [offsetWidth, setOffsetWidth] = React.useState();
  React.useEffect(() => {
    if (btnRef.current) {
      setOffsetWidth(btnRef.current.offsetWidth);
    }
  }, [btnRef]);
  const classes = useStyles$z({
    size,
    color,
    variant,
    offsetWidth
  });
  return jsx(GeodeMenu, Object.assign({
    menuButton: jsx("div", Object.assign({
      ref: btnRef
    }, {
      children: jsx(GeodeButton, Object.assign({
        size: size,
        variant: variant,
        startIcon: icon,
        color: color,
        endIcon: jsx(ArrowVarianceDown, {}),
        className: classes.DropdownButton
      }, rest, {
        children: label && jsx(Typography, Object.assign({
          variant: size === 'medium' ? 'body2' : 'caption',
          component: "p",
          style: {
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap',
            overflow: 'hidden'
          }
        }, {
          children: label
        }))
      }))
    })),
    open: false,
    className: classes.dropdownMenu
  }, MenuProps, {
    children: children
  }));
};

const useStyles$y = makeStyles(theme => createStyles({
  root: ({
    variant
  }) => ({
    backgroundColor: theme.palette.background.paper,
    borderRadius: '100px',
    width: variant === 'fixedWidth' ? '100%' : 'fit-content',
    flex: variant === 'fixedWidth' ? '1 1 auto' : undefined,
    whiteSpace: variant === 'fixedWidth' ? 'nowrap' : undefined
  }),
  toggleBtn: ({
    orientation,
    size,
    color
  }) => ({
    padding: orientation === 'horizontal' ? size === 'medium' ? theme.spacing(1, 1.5) : '7px 10px' : size === 'medium' ? theme.spacing(1) : '7px',
    height: size === 'medium' ? 36 : 32,
    width: orientation === 'vertical' ? size === 'medium' ? 36 : 32 : '',
    borderColor: theme.palette.stroke.divider,
    borderRadius: '100px',
    color: theme.palette.customUI.main,
    '&:hover': {
      backgroundColor: theme.palette.customUI.hover
    },
    '&.MuiToggleButton-root.Mui-selected': {
      color: getMainColor(theme, {
        color
      }),
      backgroundColor: getMainColor(theme, {
        select: true,
        color
      }),
      '&:hover': {
        backgroundColor: getMainColor(theme, {
          focus: true,
          color
        })
      }
    },
    '&.MuiToggleButton-root.Mui-disabled': {
      color: theme.palette.text.disabled
    }
  }),
  fixedWidthBtn: {
    flexGrow: 1,
    maxWidth: 'none',
    flexBasis: 0,
    flexShrink: 1
  },
  labelWrapper: ({
    size
  }) => ({
    textTransform: 'none',
    '& .MuiSvgIcon-root': {
      height: size === 'medium' ? 20 : 18,
      width: size === 'medium' ? 20 : 18
    }
  })
}));
const SegmentedControl = _a => {
  var {
    options,
    className,
    color = 'primary',
    size = 'medium',
    variant = 'flexWidth',
    orientation = 'horizontal',
    exclusive = false,
    value,
    onChange
  } = _a,
      rest = __rest(_a, ["options", "className", "color", "size", "variant", "orientation", "exclusive", "value", "onChange"]);

  const classes = useStyles$y({
    size,
    color,
    variant,
    orientation
  });
  return jsx(ToggleButtonGroup, Object.assign({
    value: value,
    onChange: onChange,
    exclusive: exclusive,
    orientation: orientation,
    className: className,
    classes: {
      root: classes.root
    }
  }, rest, {
    children: options.map(({
      text,
      icon,
      value,
      selected,
      disabled
    }, idx) => jsxs(ToggleButton, Object.assign({
      value: value,
      "aria-label": value,
      selected: selected,
      disabled: disabled,
      className: variant === 'fixedWidth' ? classes.fixedWidthBtn : '',
      classes: {
        root: classes.toggleBtn,
        label: classes.labelWrapper
      }
    }, {
      children: [icon && icon, text && jsx(Typography, Object.assign({
        variant: size === 'medium' ? 'body2' : 'caption',
        component: "p",
        style: {
          marginLeft: orientation === 'horizontal' && icon && text ? '8px' : ''
        }
      }, {
        children: orientation === 'vertical' ? icon ? null : getNameInitials(text) : text
      }))]
    }), `${text}-${idx}`))
  }));
};

const darkBackgrounds = {
  0: 'inherit',
  1: 'rgba(255,255,255,0.05)',
  2: 'rgba(255,255,255,0.07)',
  3: 'rgba(255,255,255,0.08)',
  4: 'rgba(255,255,255,0.09)',
  5: 'rgba(32, 39, 47, 1)',
  6: 'rgba(255,255,255,0.11)',
  7: 'rgba(33, 41, 50, 1)',
  8: 'rgba(255,255,255,0.12)',
  9: 'rgba(35, 42, 52, 1)',
  10: 'rgba(35, 44, 52, 1)',
  11: 'rgba(36, 45, 54, 1)',
  12: 'rgba(255,255,255,0.14)',
  13: 'rgba(38, 46, 56, 1)',
  14: 'rgba(39, 47, 57, 1)',
  15: 'rgba(40, 49, 59, 1)',
  16: 'rgba(255,255,255,0.15)',
  17: 'rgba(41, 50, 60, 1)',
  18: 'rgba(43, 52, 62, 1)',
  19: 'rgba(43, 53, 62, 1)',
  20: 'rgba(44, 54, 64, 1)',
  21: 'rgba(45, 54, 65, 1)',
  22: 'rgba(45, 54, 65, 1)',
  23: 'rgba(45, 55, 65, 1)',
  24: 'rgba(255,255,255,0.16)'
};
const useStyles$x = makeStyles$1(theme => createStyles$1({
  card: ({
    elevation
  }) => ({
    backgroundColor: theme.palette.type === 'dark' && elevation ? darkBackgrounds[elevation] : '',
    border: elevation === 0 ? `1px solid ${theme.palette.miscellaneous.divider}` : 'none'
  })
}));

const GeodeCard = _a => {
  var {
    children,
    elevation
  } = _a,
      rest = __rest(_a, ["children", "elevation"]);

  const classes = useStyles$x({
    elevation
  });
  return jsx(Card, Object.assign({
    classes: {
      root: classes.card
    },
    elevation: elevation
  }, rest, {
    children: children
  }));
};

const useStyles$w = makeStyles$1(theme => createStyles$1({
  root: {
    maxWidth: 450
  },
  rightActions: {
    marginLeft: 'auto'
  },
  dataArea: {
    display: 'grid',
    gridTemplateColumns: 'repeat(3, 1fr)',
    gridRowGap: theme.spacing(2),
    maxHeight: 220,
    overflow: 'auto'
  },
  expand: {
    transform: 'rotate(0deg)',
    transition: theme.transitions.create('transform', {
      duration: theme.transitions.duration.shortest
    })
  },
  expandOpen: {
    transform: 'rotate(180deg)'
  }
}));
const DataContent = ({
  children
}) => {
  const classes = useStyles$w();
  return jsx(CardContent, Object.assign({
    className: classes.dataArea
  }, {
    children: children
  }));
};

const AnalysisCard = _a => {
  var {
    actions,
    children,
    className,
    expand,
    expanded,
    expandDirection = 'bottom',
    expandContent,
    headerExtra,
    onExpand,
    rightActions,
    subheader,
    title
  } = _a,
      rest = __rest(_a, ["actions", "children", "className", "expand", "expanded", "expandDirection", "expandContent", "headerExtra", "onExpand", "rightActions", "subheader", "title"]);

  const classes = useStyles$w();
  return jsxs(GeodeCard, Object.assign({
    className: clsx(classes.root, className)
  }, rest, {
    children: [jsx(CardHeader, {
      action: headerExtra,
      title: title,
      subheader: subheader,
      titleTypographyProps: {
        variant: 'h6',
        color: 'textPrimary'
      },
      subheaderTypographyProps: {
        variant: 'caption'
      }
    }), children, expandDirection === 'center' && jsx(CardContent, {
      children: jsx(Collapse, Object.assign({
        in: expanded,
        timeout: 'auto',
        unmountOnExit: true
      }, {
        children: expandContent
      }))
    }), jsxs(CardActions, Object.assign({
      disableSpacing: true
    }, {
      children: [actions, jsxs("div", Object.assign({
        className: classes.rightActions
      }, {
        children: [rightActions, expand && jsx(IconButton, Object.assign({
          className: clsx(classes.expand, {
            [classes.expandOpen]: expanded
          }),
          onClick: onExpand,
          "aria-expanded": expanded,
          "aria-label": 'show more'
        }, {
          children: jsx(ExpandMoreIcon, {})
        }))]
      }))]
    })), expandDirection === 'bottom' && jsx(Collapse, Object.assign({
      in: expanded,
      timeout: 'auto',
      unmountOnExit: true
    }, {
      children: jsx(CardContent, {
        children: expandContent
      })
    }))]
  }));
};

const useStyles$v = makeStyles$1(theme => createStyles$1({
  root: {
    display: 'flex'
  },
  divider: ({
    dividerColor
  }) => ({
    backgroundColor: dividerColor ? dividerColor : theme.palette.miscellaneous.divider,
    width: 1.75,
    borderRadius: 0.75,
    margin: '6px 12px 6px 0px'
  }),
  textContainer: {
    display: 'grid',
    gridGap: theme.spacing(0.5)
  }
}));

const CardDataTile = ({
  content,
  dividerColor,
  header,
  variant: _variant = 'small'
}) => {
  const classes = useStyles$v({
    dividerColor
  });
  return jsxs("div", Object.assign({
    className: classes.root
  }, {
    children: [jsx(Divider, {
      className: classes.divider,
      orientation: 'vertical',
      flexItem: true
    }), jsxs("div", Object.assign({
      className: classes.textContainer
    }, {
      children: [jsx(Typography, Object.assign({
        variant: 'caption',
        color: 'textSecondary'
      }, {
        children: header
      })), jsx(Typography, Object.assign({
        variant: _variant === 'large' ? 'h5' : 'body2',
        color: 'textPrimary'
      }, {
        children: content
      }))]
    }))]
  }));
};

const useStyles$u = makeStyles$1(() => createStyles$1({
  root: {
    maxWidth: 450,
    maxHeight: 300
  },
  rightActions: {
    marginLeft: 'auto'
  },
  contentContainer: {
    display: 'grid'
  },
  textArea: {
    display: 'flex',
    flexWrap: 'wrap'
  }
}));

const DescriptionCard = _a => {
  var {
    avatar,
    children,
    className,
    content,
    elevation,
    headerExtra,
    rightActions,
    subheader,
    title
  } = _a,
      rest = __rest(_a, ["avatar", "children", "className", "content", "elevation", "headerExtra", "rightActions", "subheader", "title"]);

  const classes = useStyles$u();
  return jsxs(GeodeCard, Object.assign({
    className: clsx(classes.root, className),
    elevation: elevation
  }, rest, {
    children: [jsx(CardHeader, {
      action: headerExtra,
      title: title,
      subheader: subheader,
      titleTypographyProps: {
        variant: 'h6'
      },
      subheaderTypographyProps: {
        variant: 'caption'
      },
      avatar: avatar
    }), jsx(CardContent, Object.assign({
      className: classes.contentContainer
    }, {
      children: jsx(Typography, Object.assign({
        variant: 'caption',
        color: 'textPrimary',
        className: classes.textArea
      }, {
        children: content
      }))
    })), jsxs(CardActions, Object.assign({
      disableSpacing: true
    }, {
      children: [children, rightActions && jsx("div", Object.assign({
        className: classes.rightActions
      }, {
        children: rightActions
      }))]
    }))]
  }));
};

const useStyles$t = makeStyles$1(theme => createStyles$1({
  root: {
    maxWidth: 450
  },
  rightActions: {
    marginLeft: 'auto'
  },
  contentContainer: {
    display: 'grid'
  },
  dataArea: {
    display: 'grid',
    gridTemplateColumns: 'repeat(3, 1fr)',
    gridRowGap: theme.spacing(2),
    maxHeight: 220,
    overflow: 'auto'
  },
  expand: {
    transform: 'rotate(0deg)',
    transition: theme.transitions.create('transform', {
      duration: theme.transitions.duration.shortest
    })
  },
  expandOpen: {
    transform: 'rotate(180deg)'
  }
}));

const IdentificationCard = _a => {
  var {
    actions,
    avatar,
    children,
    className,
    expand,
    expanded,
    expandDirection = 'bottom',
    expandContent,
    headerExtra,
    onExpand,
    rightActions,
    status,
    subheader,
    title
  } = _a,
      rest = __rest(_a, ["actions", "avatar", "children", "className", "expand", "expanded", "expandDirection", "expandContent", "headerExtra", "onExpand", "rightActions", "status", "subheader", "title"]);

  const classes = useStyles$t();
  return jsxs(GeodeCard, Object.assign({
    className: clsx(classes.root, className)
  }, rest, {
    children: [jsx(CardHeader, {
      action: headerExtra,
      title: title,
      subheader: subheader,
      titleTypographyProps: {
        variant: 'h6'
      },
      subheaderTypographyProps: {
        variant: 'caption'
      },
      avatar: avatar
    }), status && jsx(CardContent, Object.assign({
      className: 'status-area'
    }, {
      children: status
    })), jsxs(CardContent, Object.assign({
      className: classes.contentContainer
    }, {
      children: [jsx("div", Object.assign({
        className: classes.dataArea
      }, {
        children: children
      })), expandDirection === 'center' && jsx(Collapse, Object.assign({
        in: expanded,
        timeout: 'auto',
        unmountOnExit: true
      }, {
        children: expandContent
      }))]
    })), jsxs(CardActions, Object.assign({
      disableSpacing: true
    }, {
      children: [actions, jsxs("div", Object.assign({
        className: classes.rightActions
      }, {
        children: [rightActions, expand && jsx(IconButton, Object.assign({
          className: clsx(classes.expand, {
            [classes.expandOpen]: expanded
          }),
          onClick: onExpand,
          "aria-expanded": expanded,
          "aria-label": 'show more'
        }, {
          children: jsx(ExpandMoreIcon, {})
        }))]
      }))]
    })), expandDirection === 'bottom' && jsx(Collapse, Object.assign({
      in: expanded,
      timeout: 'auto',
      unmountOnExit: true
    }, {
      children: jsx(CardContent, {
        children: expandContent
      })
    }))]
  }));
};

const useStyles$s = makeStyles$1(theme => createStyles$1({
  root: ({
    direction
  }) => ({
    maxWidth: direction && (direction === 'row' || direction === 'row-reverse') ? 200 : 150,
    '& .MuiCardContent-root': {
      padding: theme.spacing(1.5),
      '& .MuiCardContent-root:last-child': {
        paddingBottom: theme.spacing(2)
      }
    }
  })
}));

const SimpleTile = _a => {
  var {
    children,
    className,
    data,
    direction = 'column',
    elevation,
    dataTextColor = 'textPrimary'
  } = _a,
      rest = __rest(_a, ["children", "className", "data", "direction", "elevation", "dataTextColor"]);

  const classes = useStyles$s({
    direction
  });
  return jsx(GeodeCard, Object.assign({
    className: clsx(classes.root, className),
    elevation: elevation
  }, rest, {
    children: jsx(CardContent, {
      children: direction === 'row' || direction === 'row-reverse' ? jsxs(Grid, Object.assign({
        direction: direction,
        container: true,
        spacing: 1
      }, {
        children: [jsx(Grid, Object.assign({
          item: true,
          xs: 3
        }, {
          children: jsx(Typography, Object.assign({
            variant: 'h4',
            color: dataTextColor
          }, {
            children: data
          }))
        })), jsx(Grid, Object.assign({
          item: true,
          xs: 9
        }, {
          children: children
        }))]
      })) : jsxs(Grid, Object.assign({
        direction: direction,
        container: true
      }, {
        children: [jsx(Grid, Object.assign({
          item: true,
          xs: 12
        }, {
          children: jsx(Typography, Object.assign({
            variant: 'h4',
            color: dataTextColor
          }, {
            children: data
          }))
        })), jsx(Grid, Object.assign({
          item: true,
          xs: 12
        }, {
          children: children
        }))]
      }))
    })
  }));
};

const useStyles$r = makeStyles$1(() => createStyles$1({
  root: {
    minWidth: 200,
    maxWidth: 350
  },
  rightActions: {
    marginLeft: 'auto'
  }
}));

const TileCard = _a => {
  var {
    children,
    className,
    data,
    elevation,
    headerExtra,
    rightActions,
    subheader,
    title
  } = _a,
      rest = __rest(_a, ["children", "className", "data", "elevation", "headerExtra", "rightActions", "subheader", "title"]);

  const classes = useStyles$r();
  return jsxs(GeodeCard, Object.assign({
    className: clsx(classes.root, className),
    elevation: elevation
  }, rest, {
    children: [jsx(CardHeader, {
      action: headerExtra,
      title: title,
      subheader: subheader,
      titleTypographyProps: {
        variant: 'h6'
      },
      subheaderTypographyProps: {
        variant: 'caption'
      }
    }), jsx(CardContent, {
      children: jsx(Typography, Object.assign({
        variant: 'h4',
        color: 'textPrimary'
      }, {
        children: data
      }))
    }), jsxs(CardActions, Object.assign({
      disableSpacing: true
    }, {
      children: [children, jsx("div", Object.assign({
        className: classes.rightActions
      }, {
        children: rightActions
      }))]
    }))]
  }));
};

const useStyles$q = makeStyles(theme => createStyles({
  root: ({
    disabled,
    error
  }) => ({
    color: getMainColor(theme, {
      disabled,
      error,
      text: 'hint'
    })
  })
}));
function InputHelperText({
  children,
  disabled = false,
  error = false,
  className
}) {
  const classes = useStyles$q({
    disabled,
    error
  });
  return jsx(Typography, Object.assign({
    className: clsx(className, classes.root),
    variant: 'caption',
    component: 'p'
  }, {
    children: children
  }));
}

var toIntegerOrInfinity = toIntegerOrInfinity$4;
var toString$1 = toString$6;
var requireObjectCoercible$1 = requireObjectCoercible$7;

var $RangeError = RangeError;

// `String.prototype.repeat` method implementation
// https://tc39.es/ecma262/#sec-string.prototype.repeat
var stringRepeat = function repeat(count) {
  var str = toString$1(requireObjectCoercible$1(this));
  var result = '';
  var n = toIntegerOrInfinity(count);
  if (n < 0 || n == Infinity) throw $RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};

// https://github.com/tc39/proposal-string-pad-start-end
var uncurryThis = functionUncurryThis;
var toLength = toLength$3;
var toString = toString$6;
var $repeat = stringRepeat;
var requireObjectCoercible = requireObjectCoercible$7;

var repeat = uncurryThis($repeat);
var stringSlice = uncurryThis(''.slice);
var ceil = Math.ceil;

// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function (IS_END) {
  return function ($this, maxLength, fillString) {
    var S = toString(requireObjectCoercible($this));
    var intMaxLength = toLength(maxLength);
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : toString(fillString);
    var fillLen, stringFiller;
    if (intMaxLength <= stringLength || fillStr == '') return S;
    fillLen = intMaxLength - stringLength;
    stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringSlice(stringFiller, 0, fillLen);
    return IS_END ? S + stringFiller : stringFiller + S;
  };
};

var stringPad = {
  // `String.prototype.padStart` method
  // https://tc39.es/ecma262/#sec-string.prototype.padstart
  start: createMethod(false),
  // `String.prototype.padEnd` method
  // https://tc39.es/ecma262/#sec-string.prototype.padend
  end: createMethod(true)
};

// https://github.com/zloirock/core-js/issues/280
var userAgent = engineUserAgent;

var stringPadWebkitBug = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);

var $ = _export;
var $padStart = stringPad.start;
var WEBKIT_BUG = stringPadWebkitBug;

// `String.prototype.padStart` method
// https://tc39.es/ecma262/#sec-string.prototype.padstart
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

var call = functionCall;
var hasOwn = hasOwnProperty_1;
var isPrototypeOf = objectIsPrototypeOf;
var regExpFlags = regexpFlags$1;

var RegExpPrototype$1 = RegExp.prototype;

var regexpGetFlags = function (R) {
  var flags = R.flags;
  return flags === undefined && !('flags' in RegExpPrototype$1) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype$1, R)
    ? call(regExpFlags, R) : flags;
};

var PROPER_FUNCTION_NAME = functionName.PROPER;
var defineBuiltIn = defineBuiltIn$5;
var anObject = anObject$a;
var $toString = toString$6;
var fails = fails$j;
var getRegExpFlags = regexpGetFlags;

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var n$ToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  defineBuiltIn(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var pattern = $toString(R.source);
    var flags = $toString(getRegExpFlags(R));
    return '/' + pattern + '/' + flags;
  }, { unsafe: true });
}

const setOpacity = (hex, alpha) => !hex ? hex : `${hex}${Math.floor(alpha * 255).toString(16).padStart(2)}`;

const useStyles$p = makeStyles(theme => createStyles({
  searchForm: ({
    color,
    disabled,
    error,
    variant
  }) => ({
    backgroundColor: variant === 'contained' ? setOpacity(theme.palette.customUI.main, theme.palette.type === 'dark' ? 0.35 : 0.12) : '',
    color: theme.palette.text.hint,
    minWidth: 300,
    '& > input': {
      padding: theme.spacing(0, 1)
    },
    '& div button svg': {
      fill: theme.palette.text.hint
    },
    '& div svg': {
      fill: variant === 'contained' ? theme.palette.text.hint : getMainColor(theme, {
        text: 'secondary',
        disabled,
        error
      })
    },
    '&:focus-within': {
      backgroundColor: variant === 'contained' ? setOpacity(theme.palette.customUI.main, theme.palette.type === 'dark' ? 0.5 : 0.2) : '',
      color: theme.palette.text.primary,
      '& div button svg': {
        fill: theme.palette.customUI.main
      },
      '& div svg': {
        fill: theme.palette.customUI.main
      },
      '&:hover': {
        border: variant === 'contained' ? 'unset' : `1px solid ${getMainColor(theme, {
          color,
          disabled,
          error
        })}`
      },
      border: variant === 'contained' ? 'unset' : `1px solid ${getMainColor(theme, {
        color,
        disabled,
        error
      })}`
    },
    '&:hover': {
      backgroundColor: variant === 'contained' ? setOpacity(theme.palette.customUI.main, theme.palette.type === 'dark' ? 0.5 : 0.2) : '',
      borderColor: variant === 'contained' ? 'unset' : getMainColor(theme, {
        text: 'primary',
        disabled,
        error
      }),
      '& div svg': {
        fill: variant === 'contained' ? theme.palette.text.primary : ''
      },
      '& div button svg': {
        fill: theme.palette.text.hint
      }
    },
    border: variant === 'contained' ? 'unset' : `1px solid ${getMainColor(theme, {
      text: 'secondary',
      disabled,
      error
    })}`,
    borderRadius: 4,
    minHeight: 40,
    margin: theme.spacing(0.5, 0),
    padding: theme.spacing(1)
  })
}));

function SearchField(_a, ref) {
  var {
    className,
    clearSearchHandler,
    color = 'primary',
    defaultValue,
    disabled = false,
    error = false,
    helperText,
    onChange,
    placeholder,
    value,
    variant = 'outlined'
  } = _a,
      rest = __rest(_a, ["className", "clearSearchHandler", "color", "defaultValue", "disabled", "error", "helperText", "onChange", "placeholder", "value", "variant"]);

  const classes = useStyles$p({
    color,
    disabled,
    error,
    variant
  });
  return jsxs(Fragment, {
    children: [jsx(InputBase, Object.assign({
      ref: ref,
      className: clsx(className, classes.searchForm),
      defaultValue: defaultValue,
      disabled: disabled,
      value: value,
      placeholder: placeholder || 'Search...',
      onChange: onChange,
      startAdornment: jsx(InputAdornment, Object.assign({
        position: "start"
      }, {
        children: jsx(Magnifyglass, {})
      })),
      endAdornment: value ? jsx(InputAdornment, Object.assign({
        position: "end"
      }, {
        children: jsx(IconButton, Object.assign({
          size: "small",
          color: "inherit",
          onClick: clearSearchHandler
        }, {
          children: jsx(XmarkCircleFill, {})
        }))
      })) : null
    }, rest)), helperText && jsx(InputHelperText, Object.assign({
      disabled: disabled,
      error: error
    }, {
      children: helperText
    }))]
  });
}

var SearchField$1 = /*#__PURE__*/forwardRef(SearchField);

const useStyles$o = makeStyles(theme => createStyles({
  progressIcon: {
    top: 10,
    right: 10,
    position: 'absolute'
  }
}));

function Autocomplete(_a, ref) {
  var {
    className,
    defaultValue,
    disabled = false,
    placeholder,
    autoFocus,
    value,
    loading,
    onChange,
    startAdornmentIcon = Magnifyglass
  } = _a,
      props = __rest(_a, ["className", "defaultValue", "disabled", "placeholder", "autoFocus", "value", "loading", "onChange", "startAdornmentIcon"]);

  const color = props.color === 'secondary' ? 'secondary' : 'primary';
  const searchClasses = useStyles$p({
    color: color,
    disabled: disabled,
    error: false
  });
  const classes = useStyles$o();
  return jsx(MUIAutocomplete, Object.assign({
    ref: ref
  }, props, {
    value: value,
    disabled: disabled,
    defaultValue: defaultValue,
    onChange: onChange,
    closeIcon: jsx(XmarkCircleFill, {}),
    size: "small",
    renderInput: params => jsx("div", Object.assign({
      ref: params.InputProps.ref
    }, {
      children: jsx(TextField$2, Object.assign({}, params, {
        className: clsx(className, searchClasses.searchForm),
        defaultValue: defaultValue,
        // disabled={disabled}
        placeholder: placeholder || 'Search...',
        variant: "standard",
        InputProps: Object.assign(Object.assign({}, params.InputProps), {
          autoFocus: autoFocus,
          startAdornment: params.InputProps.startAdornment || jsx(InputAdornment, Object.assign({
            position: "start"
          }, {
            children: startAdornmentIcon({})
          })),
          endAdornment: jsx(Fragment, {
            children: loading ? jsx(CircularProgress, {
              className: classes.progressIcon,
              color: "inherit",
              size: 18
            }) : params.InputProps.endAdornment
          }),
          disableUnderline: true
        })
      }))
    }))
  }));
}

var Autocomplete$1 = /*#__PURE__*/forwardRef(Autocomplete);

const useStyles$n = makeStyles(theme => createStyles({
  inputBase: ({
    color,
    disabled,
    error,
    size,
    multiline
  }) => ({
    backgroundColor: disabled ? theme.palette.action.disabledBackground : theme.palette.background.paper,
    border: disabled ? `1px solid ${theme.palette.stroke.disabled}` : error ? `1px solid ${getMainColor(theme, {
      error
    })}` : `1px solid ${theme.palette.stroke.stroke}`,
    color: disabled ? getMainColor(theme, {
      disabled
    }) : theme.palette.customUI.main,
    borderRadius: 4,
    height: multiline ? '' : size === 'small' ? 32 : 40,
    maxWidth: multiline ? '100%' : '',
    fontSize: size === 'small' ? 12 : 14,
    padding: multiline ? theme.spacing(0) : size === 'small' ? theme.spacing(0.75, 1) : theme.spacing(0.75, 1.25),
    '& svg': {
      width: size === 'small' ? 20 : 24,
      height: size === 'small' ? 20 : 24
    },
    '&:focus-within': {
      borderColor: getMainColor(theme, {
        color,
        error
      })
    },
    '&:hover:not(:focus-within)': {
      borderColor: !disabled && !error ? theme.palette.stroke.hover : disabled ? 'none' : getMainColor(theme, {
        error
      })
    }
  }),
  input: ({
    startAdornment,
    size
  }) => ({
    padding: 0,
    margin: startAdornment ? size === 'small' ? theme.spacing(0, 0.75) : theme.spacing(0, 1) : size === 'small' ? theme.spacing(0, 0.5) : theme.spacing(0, 0.75),
    color: theme.palette.text.primary,
    height: size === 'medium' ? 22 : 16
  }),
  inputMultiline: ({
    fullWidth
  }) => ({
    height: '80px !important',
    minWidth: fullWidth ? '100%' : 260,
    resize: fullWidth ? 'unset' : 'horizontal',
    overflow: 'scroll !important',
    padding: theme.spacing(1, 1.5),
    boxSizing: 'border-box',
    margin: 0,
    '&::placeholder': {
      fontSize: '12px'
    }
  }),
  adornment: ({
    size
  }) => ({
    height: size === 'medium' ? 24 : 20
  }),
  clearIconBtn: ({
    size
  }) => ({
    height: size === 'medium' ? 28 : 24,
    width: size === 'medium' ? 28 : 24,
    padding: 2
  }),
  label: ({
    disabled
  }) => ({
    color: disabled ? theme.palette.text.disabled : theme.palette.customUI.main,
    fontSize: 11,
    lineHeight: '16px',
    fontWeight: 500,
    marginLeft: theme.spacing(0.5),
    marginBottom: theme.spacing(0.5)
  }),
  asterisk: ({
    disabled
  }) => ({
    color: disabled ? theme.palette.text.disabled : theme.palette.error.main
  }),
  helpText: {
    marginTop: theme.spacing(0.25),
    marginLeft: theme.spacing(0.5),
    height: theme.spacing(2),
    lineHeight: '16px',
    fontSize: '11px'
  }
}));

function TextField(_a, ref) {
  var {
    className,
    size = 'medium',
    color = 'primary',
    disabled = false,
    error = false,
    InputLabelProps,
    helperText,
    labelText,
    onChange,
    onInputClear,
    required = false,
    startAdornment,
    endAdornment,
    value,
    fullWidth = false,
    multiline = false
  } = _a,
      rest = __rest(_a, ["className", "size", "color", "disabled", "error", "InputLabelProps", "helperText", "labelText", "onChange", "onInputClear", "required", "startAdornment", "endAdornment", "value", "fullWidth", "multiline"]);

  const classes = useStyles$n({
    size,
    color,
    disabled,
    error,
    startAdornment,
    multiline,
    fullWidth
  });
  return jsxs("div", Object.assign({
    className: className
  }, {
    children: [labelText && jsx(InputLabel, Object.assign({
      className: classes.label,
      classes: {
        asterisk: classes.asterisk
      },
      required: required
    }, InputLabelProps, {
      children: labelText
    })), jsx(InputBase, Object.assign({
      ref: ref,
      className: undefined,
      classes: {
        root: classes.inputBase,
        input: classes.input,
        inputMultiline: classes.inputMultiline
      },
      disabled: disabled,
      value: value,
      onChange: onChange,
      multiline: multiline,
      fullWidth: fullWidth,
      startAdornment: multiline ? null : startAdornment && jsx("span", Object.assign({
        className: classes.adornment
      }, {
        children: startAdornment
      })),
      endAdornment: multiline ? null : typeof endAdornment === 'string' ? jsx("span", {
        children: endAdornment
      }) : value && onInputClear ? jsx(GeodeIconButton$1, Object.assign({
        size: size,
        onClick: onInputClear,
        color: "default",
        className: classes.clearIconBtn
      }, {
        children: jsx(XmarkCircleFill, {})
      })) : endAdornment && jsx("span", Object.assign({
        className: classes.adornment
      }, {
        children: endAdornment
      })),
      required: required
    }, rest)), helperText && jsx(InputHelperText, Object.assign({
      disabled: disabled,
      error: error,
      className: classes.helpText
    }, {
      children: helperText
    }))]
  }));
}

var TextField$1 = /*#__PURE__*/forwardRef(TextField);

const useStyles$m = makeStyles(theme => createStyles({
  inputContainer: ({
    size,
    disabled,
    fullWidth
  }) => ({
    display: 'inline-flex',
    alignItems: 'center',
    flexWrap: 'nowrap',
    width: fullWidth ? '100%' : '',
    '& > button': {
      minWidth: size === 'small' ? 28 : 34,
      width: size === 'small' ? 28 : 34,
      height: size === 'small' ? 32 : 40,
      borderColor: disabled ? `${theme.palette.stroke.disabled} !important` : theme.palette.stroke.stroke,
      backgroundColor: disabled ? `${theme.palette.action.disabledBackground} !important` : setOpacity$1(theme.palette.customUI.main, 0.1),
      color: theme.palette.customUI.main,
      '&:hover': {
        border: `1px solid ${theme.palette.stroke.stroke}`,
        backgroundColor: getMainColor(theme, {
          hover: true,
          color: 'default'
        })
      },
      '& .MuiSvgIcon-root': {
        fontSize: 'medium'
      }
    }
  }),
  leftCounterBtn: {
    borderRadius: '4px 0 0 4px',
    borderRight: '0 !important'
  },
  rightCounterBtn: {
    borderRadius: '0 4px 4px 0',
    borderLeft: '0 !important'
  },
  inputBase: ({
    color,
    disabled,
    error,
    size
  }) => ({
    '&:focus-within': {
      borderColor: getMainColor(theme, {
        color,
        error
      }),
      color: theme.palette.text.primary
    },
    '&:hover:not(:focus-within)': {
      borderColor: !disabled && !error ? theme.palette.stroke.hover : getMainColor(theme, {
        disabled,
        error,
        hover: true
      })
    },
    '& > input': {
      textAlign: 'center'
    },
    backgroundColor: disabled ? theme.palette.action.disabledBackground : theme.palette.background.paper,
    border: disabled ? `1px solid ${theme.palette.stroke.disabled}` : error ? `1px solid ${getMainColor(theme, {
      error
    })}` : `1px solid ${theme.palette.stroke.stroke}`,
    height: size === 'small' ? 32 : 40,
    fontSize: size === 'small' ? 12 : 14,
    padding: size === 'small' ? theme.spacing(0.75, 1.5) : theme.spacing(1, 2),
    color: theme.palette.customUI.main
  }),
  label: ({
    disabled
  }) => ({
    color: disabled ? theme.palette.text.disabled : theme.palette.customUI.main,
    fontSize: 11,
    lineHeight: '16px',
    fontWeight: 500,
    marginLeft: theme.spacing(0.5),
    marginBottom: theme.spacing(0.5)
  }),
  asterisk: ({
    disabled
  }) => ({
    color: disabled ? theme.palette.text.disabled : theme.palette.error.main
  }),
  helpText: {
    marginTop: theme.spacing(0.25),
    marginLeft: theme.spacing(0.5),
    height: theme.spacing(2),
    lineHeight: '16px',
    fontSize: '11px'
  }
}));

function CounterField(_a, ref) {
  var {
    className,
    size = 'small',
    color = 'primary',
    disabled = false,
    error = false,
    InputLabelProps,
    labelText,
    value,
    onChange,
    onIncrement,
    onDecrement,
    required = false,
    fullWidth = false,
    helperText
  } = _a,
      rest = __rest(_a, ["className", "size", "color", "disabled", "error", "InputLabelProps", "labelText", "value", "onChange", "onIncrement", "onDecrement", "required", "fullWidth", "helperText"]);

  const classes = useStyles$m({
    size,
    color,
    disabled,
    error,
    labelText,
    helperText,
    fullWidth
  });
  return jsxs("div", Object.assign({
    className: className
  }, {
    children: [labelText && jsx(InputLabel, Object.assign({
      className: classes.label,
      classes: {
        asterisk: classes.asterisk
      },
      required: required
    }, InputLabelProps, {
      children: labelText
    })), jsxs("div", Object.assign({
      className: classes.inputContainer
    }, {
      children: [jsx(GeodeButton, Object.assign({
        variant: "outlined",
        size: size,
        className: classes.leftCounterBtn,
        onClick: onDecrement,
        disabled: disabled,
        "aria-label": "reduce"
      }, {
        children: jsx(Minus, {})
      })), jsx(InputBase, Object.assign({
        ref: ref,
        className: classes.inputBase,
        disabled: disabled,
        value: value,
        placeholder: "0",
        onChange: onChange,
        required: required,
        error: error,
        multiline: false,
        fullWidth: fullWidth
      }, rest)), jsx(GeodeButton, Object.assign({
        variant: "outlined",
        size: size,
        className: classes.rightCounterBtn,
        onClick: onIncrement,
        disabled: disabled,
        "aria-label": "increase"
      }, {
        children: jsx(Plus, {})
      }))]
    })), helperText && jsx(InputHelperText, Object.assign({
      disabled: disabled,
      error: error,
      className: classes.helpText
    }, {
      children: helperText
    }))]
  }));
}

var CounterField$1 = /*#__PURE__*/forwardRef(CounterField);

const useStyles$l = makeStyles(theme => createStyles({
  root: ({
    size,
    disabled
  }) => ({
    padding: size === 'small' ? theme.spacing(0.5) : theme.spacing(0.75),
    color: disabled ? getMainColor(theme, {
      disabled
    }) : theme.palette.customUI.main,
    '&:hover': {
      backgroundColor: theme.palette.customUI.hover
    },
    '&:focus': {
      backgroundColor: theme.palette.customUI.focused
    }
  }),
  inputLabelContainer: ({
    size
  }) => ({
    display: 'inline-flex',
    flexDirection: 'row',
    alignItems: 'center',
    width: 'fit-content'
  }),
  labelIcon: ({
    disabled
  }) => ({
    marginRight: theme.spacing(0.75),
    minWidth: 20,
    minHeight: 20,
    '& .MuiSvgIcon-root': {
      fontSize: '1.2rem',
      color: disabled ? getMainColor(theme, {
        disabled
      }) : getMainColor(theme, {
        text: 'primary'
      })
    }
  }),
  text: ({
    disabled
  }) => ({
    lineHeight: '22px',
    letterSpacing: 0.2,
    color: disabled ? getMainColor(theme, {
      disabled
    }) : getMainColor(theme, {
      text: 'primary'
    }),
    paddingRight: theme.spacing(0.75)
  }),
  smallText: {
    fontSize: 12
  }
}));

const InputControlLabel = ({
  children,
  labelIcon,
  label,
  size,
  disabled,
  className
}) => {
  const classes = useStyles$l({
    size,
    disabled,
    label,
    labelIcon
  });
  return jsxs("div", Object.assign({
    className: clsx(classes.inputLabelContainer, className)
  }, {
    children: [children, labelIcon && jsx(ListItemIcon, Object.assign({
      className: classes.labelIcon
    }, {
      children: labelIcon
    })), label && jsx(Typography, Object.assign({
      variant: "body2",
      className: clsx(classes.text, {
        [classes.smallText]: size === 'small'
      })
    }, {
      children: label
    }))]
  }));
};

const GeodeCheckbox = _a => {
  var {
    size = 'medium',
    labelIcon,
    label,
    color = 'primary',
    checked,
    onChange,
    indeterminate = false,
    value,
    disabled = false
  } = _a,
      rest = __rest(_a, ["size", "labelIcon", "label", "color", "checked", "onChange", "indeterminate", "value", "disabled"]);

  const classes = useStyles$l({
    size,
    disabled
  });
  return jsx(InputControlLabel, Object.assign({
    labelIcon: labelIcon,
    label: label,
    size: size,
    disabled: disabled
  }, {
    children: jsx(Checkbox, Object.assign({
      size: size,
      icon: jsx(Square, {}),
      checkedIcon: jsx(CheckmarkSquareFill, {}),
      indeterminateIcon: jsx(MinusSquareFill, {}),
      color: color,
      onChange: onChange,
      checked: checked,
      value: value,
      indeterminate: indeterminate,
      disabled: disabled,
      classes: {
        root: classes.root
      }
    }, rest))
  }));
};
const RadioButton = _a => {
  var {
    size = 'medium',
    labelIcon,
    label,
    color = 'primary',
    checked,
    disabled = false
  } = _a,
      rest = __rest(_a, ["size", "labelIcon", "label", "color", "checked", "disabled"]);

  const classes = useStyles$l({
    size,
    disabled
  });
  return jsx(InputControlLabel, Object.assign({
    labelIcon: labelIcon,
    label: label,
    size: size,
    disabled: disabled
  }, {
    children: jsx(Radio, Object.assign({
      size: size,
      color: color,
      checked: checked,
      disabled: disabled,
      classes: {
        root: classes.root
      }
    }, rest))
  }));
};

const useStyles$k = makeStyles(theme => createStyles({
  root: {
    width: 44,
    height: 24,
    padding: 0,
    overflow: 'visible'
  },
  switchBase: ({
    disabled,
    color
  }) => ({
    width: 36,
    height: 36,
    padding: 0,
    top: -6,
    left: -6,
    '& .MuiSvgIcon-root': {
      backgroundColor: theme.palette.common.white,
      width: 20,
      height: 20,
      padding: theme.spacing(0.25),
      borderRadius: '50%',
      boxShadow: disabled ? 'none' : '0px 1px 3px rgba(0, 0, 0, 0.06), 0px 1px 1px rgba(0, 0, 0, 0.07), 0px 2px 1px rgba(0, 0, 0, 0.1)'
    },
    '&:hover': {
      backgroundColor: theme.palette.customUI.hover
    },
    '&:active': {
      backgroundColor: theme.palette.customUI.focused
    },
    '&.Mui-checked + .MuiSwitch-track': {
      opacity: disabled ? 0.12 : 1
    },
    '&.Mui-checked:active': {
      backgroundColor: color === 'secondary' ? theme.palette.secondary.focused : theme.palette.primary.focused
    }
  }),
  sizeSmall: {
    width: 36,
    height: 20,
    padding: 0,
    '& .MuiSwitch-switchBase': {
      padding: 0,
      width: 32,
      height: 32,
      '& .MuiSvgIcon-root': {
        width: 16,
        height: 16
      }
    }
  },
  switchInput: ({
    checked
  }) => ({
    left: checked ? '-50%' : '0%',
    width: '150%'
  }),
  thumb: ({
    disabled
  }) => ({
    width: 20,
    height: 20,
    backgroundColor: disabled ? theme.palette.action.disabledBackground : theme.palette.common.white,
    boxShadow: disabled ? 'none' : '0px 1px 3px rgba(0, 0, 0, 0.06), 0px 1px 1px rgba(0, 0, 0, 0.07), 0px 2px 1px rgba(0, 0, 0, 0.1)'
  }),
  track: ({
    disabled,
    checked
  }) => ({
    borderRadius: 12,
    backgroundColor: disabled ? theme.palette.action.disabledBackground : checked ? theme.palette.primary.main : theme.palette.type === 'light' ? theme.palette.customUI.light : theme.palette.customUI.dark,
    opacity: 1
  }),
  labelContainer: ({
    size
  }) => ({
    '& p': {
      marginLeft: size === 'small' ? theme.spacing(0.5) : theme.spacing(0.75)
    }
  })
}));

const GeodeSwitch = _a => {
  var {
    color = 'primary',
    size = 'medium',
    disabled = false,
    checked = false,
    disableRipple = true,
    label,
    onChange
  } = _a,
      rest = __rest(_a, ["color", "size", "disabled", "checked", "disableRipple", "label", "onChange"]);

  const classes = useStyles$k({
    disabled,
    checked,
    color,
    size
  });
  return jsx(InputControlLabel, Object.assign({
    label: label,
    size: size,
    disabled: disabled,
    className: clsx({
      [classes.labelContainer]: label
    })
  }, {
    children: jsx(Switch, Object.assign({
      color: color,
      size: size,
      disabled: disabled,
      checked: checked,
      disableRipple: disableRipple,
      onChange: onChange,
      classes: {
        root: classes.root,
        switchBase: classes.switchBase,
        sizeSmall: classes.sizeSmall,
        thumb: classes.thumb,
        track: classes.track,
        input: classes.switchInput
      }
    }, rest))
  }));
};

const useStyles$j = makeStyles(theme => createStyles({
  root: ({
    color
  }) => ({
    height: 20,
    padding: 0,
    color: color === 'primary' ? theme.palette.primary.main : theme.palette.secondary.main
  }),
  rail: ({
    color
  }) => ({
    height: 4,
    margin: '8px 0px',
    borderRadius: 99,
    opacity: 1,
    color: color === 'primary' ? theme.palette.type === 'light' ? theme.palette.primary.light : theme.palette.primary.dark : theme.palette.type === 'light' ? theme.palette.secondary.light : theme.palette.secondary.dark
  }),
  track: {
    height: 6,
    margin: '7px 0px',
    borderRadius: 99
  },
  thumb: {
    height: 20,
    width: 20,
    marginTop: 0,
    boxShadow: `0px 1px 3px rgba(0, 0, 0, 0.06), 0px 1px 1px rgba(0, 0, 0, 0.07), 0px 2px 1px rgba(0, 0, 0, 0.1)`
  },
  mark: {
    height: 4,
    width: 4,
    margin: '8px 0px'
  },
  valueLabel: {
    left: 'auto',
    top: '-30px',
    width: 'max-content',
    fontSize: 12,
    lineHeight: '24px',
    letterSpacing: 0.4,
    '& .PrivateValueLabel-thumb.PrivateValueLabel-open .PrivateValueLabel-offset': {
      transform: `scale(1) translateY(-4px)`
    },
    '& >span:first-child': {
      minWidth: 32,
      height: 24,
      width: '100%',
      padding: theme.spacing(0, 1),
      transform: 'none',
      borderRadius: 4,
      backgroundColor: theme.palette.miscellaneous.tooltip,
      border: `1px solid ${theme.palette.stroke.divider}`,
      '& >span': {
        transform: 'none',
        color: theme.palette.type === 'light' ? theme.palette.common.white : theme.palette.common.black
      }
    }
  },
  vertical: {
    '&.MuiSlider-vertical': {
      width: 20,
      padding: 0,
      '& .MuiSlider-rail': {
        width: 4,
        margin: '0px 8px'
      },
      '& .MuiSlider-track': {
        width: 6,
        margin: '0px 7px'
      },
      '& .MuiSlider-thumb': {
        marginLeft: 0,
        marginBottom: -5
      },
      '& .MuiSlider-mark': {
        margin: '0px 8px'
      }
    }
  },
  disabled: {
    '& .MuiSlider-rail': {
      color: 'inherit'
    },
    '& .MuiSlider-thumb.Mui-disabled': {
      width: 20,
      height: 20,
      marginTop: 0,
      marginLeft: -10
    },
    '&.MuiSlider-vertical .MuiSlider-thumb.Mui-disabled': {
      marginLeft: 0,
      marginBottom: -10
    }
  }
}));

const GeodeSlider = _a => {
  var {
    color = 'primary',
    disabled = false,
    onChange
  } = _a,
      rest = __rest(_a, ["color", "disabled", "onChange"]);

  const classes = useStyles$j({
    color,
    disabled
  });
  return jsx(Slider, Object.assign({
    color: color,
    disabled: disabled,
    onChange: onChange,
    classes: {
      root: classes.root,
      rail: classes.rail,
      track: classes.track,
      thumb: classes.thumb,
      mark: classes.mark,
      valueLabel: classes.valueLabel,
      vertical: classes.vertical,
      disabled: classes.disabled
    }
  }, rest));
};

const useStyles$i = makeStyles(theme => createStyles({
  root: ({
    size
  }) => ({
    width: size === "medium" ? theme.spacing(4.5) : size === "small" ? theme.spacing(4) : theme.spacing(4.5),
    height: size === "medium" ? theme.spacing(4.5) : size === "small" ? theme.spacing(4) : theme.spacing(4.5),
    borderRadius: "100px",
    "&.MuiButtonBase-root.MuiIconButton-root": {
      width: size === "medium" ? theme.spacing(4.5) : size === "small" ? theme.spacing(4) : theme.spacing(4.5),
      height: size === "medium" ? theme.spacing(4.5) : size === "small" ? theme.spacing(4) : theme.spacing(4.5)
    },
    "& p.MuiTypography-root.MuiTypography-body1": {
      textAlign: "center",
      fontWeight: "500",
      lineHeight: "20px",
      letterSpacing: size === "medium" ? "0.2px" : size === "small" ? "0.4px" : "0.2px",
      color: theme.palette.customUI.main,
      fontSize: size === "medium" ? theme.spacing(1.75) : size === "small" ? theme.spacing(1.5) : theme.spacing(1.75)
    },
    "&.Mui-disabled": {
      background: theme.palette.background.paper,
      color: theme.palette.text.disabled,
      "& p.MuiTypography-root.MuiTypography-body1": {
        color: theme.palette.text.disabled
      }
    },
    border: `1px solid ${theme.palette.stroke.divider}`,
    background: theme.palette.background.paper,
    color: theme.palette.customUI.main,
    "&:hover": {
      backgroundColor: theme.palette.customUI.hover
    },
    "& .MuiTouchRipple-child": {
      backgroundColor: setOpacity$1(theme.palette.customUI.main, 0.55)
    },
    "&.MuiToggleButton-root.Mui-selected": {
      backgroundColor: setOpacity$1(theme.palette.primary.main, 0.2),
      color: theme.palette.primary.main,
      "& p.MuiTypography-root.MuiTypography-body1": {
        color: theme.palette.primary.main
      },
      "&:hover": {
        backgroundColor: setOpacity$1(theme.palette.primary.main, 0.25)
      }
    }
  }),
  icon: ({
    size
  }) => ({
    width: size === "medium" ? theme.spacing(3) : size === "small" ? theme.spacing(2.5) : theme.spacing(3),
    height: size === "medium" ? theme.spacing(3) : size === "small" ? theme.spacing(2.5) : theme.spacing(3)
  })
}));

const GeodeToggleButton = _a => {
  var _b;

  var {
    children,
    size = "medium",
    iconOff,
    iconOn,
    tooltipOn,
    tooltipOff,
    text,
    disableRipple,
    disableFocusRipple
  } = _a,
      rest = __rest(_a, ["children", "size", "iconOff", "iconOn", "tooltipOn", "tooltipOff", "text", "disableRipple", "disableFocusRipple"]);

  const classes = useStyles$i({
    size
  });
  const initial = getNameInitials(text ? text : "");
  return !rest.disabled && (tooltipOn || tooltipOff) ? jsx(GeodeTooltip, Object.assign({
    title: (_b = rest.selected ? tooltipOn : tooltipOff) !== null && _b !== void 0 ? _b : ""
  }, {
    children: jsx("span", {
      children: jsx(ToggleButton, Object.assign({
        classes: {
          root: classes.root
        },
        disableRipple: disableRipple,
        disableFocusRipple: disableFocusRipple,
        disabled: rest.disabled
      }, rest, {
        children: iconOn || iconOff ? rest.selected ? jsx(SvgIcon, Object.assign({
          classes: {
            root: classes.icon
          }
        }, {
          children: iconOn ? iconOn : iconOff
        })) : jsx(SvgIcon, Object.assign({
          classes: {
            root: classes.icon
          }
        }, {
          children: iconOff ? iconOff : iconOn
        })) : text ? jsx(Typography, Object.assign({
          variant: 'body2',
          align: 'center'
        }, {
          children: initial
        })) : null
      }))
    })
  })) : jsx(ToggleButton, Object.assign({
    classes: {
      root: classes.root
    },
    disableRipple: disableRipple,
    disableFocusRipple: disableFocusRipple,
    disabled: rest.disabled
  }, rest, {
    children: iconOn || iconOff ? rest.selected ? jsx(SvgIcon, Object.assign({
      classes: {
        root: classes.icon
      }
    }, {
      children: iconOn ? iconOn : iconOff
    })) : jsx(SvgIcon, Object.assign({
      classes: {
        root: classes.icon
      }
    }, {
      children: iconOff ? iconOff : iconOn
    })) : text ? jsx(Typography, Object.assign({
      variant: 'body2',
      align: 'center'
    }, {
      children: initial
    })) : null
  }));
};

const useStyles$h = makeStyles(theme => createStyles({
  root: ({
    size
  }) => ({
    height: size === 'small' ? theme.spacing(3) : size === 'medium' ? theme.spacing(5) : theme.spacing(8),
    width: size === 'small' ? theme.spacing(3) : size === 'medium' ? theme.spacing(5) : theme.spacing(8),
    '& svg': {
      height: size === 'large' ? 32 : size === 'small' ? 16 : 24,
      width: size === 'large' ? 32 : size === 'small' ? 16 : 24
    },
    '& img': {
      '-webkit-user-drag': 'none'
    }
  }),
  colorDefault: {
    color: theme.palette.customUI.main,
    backgroundColor: setOpacity$1(theme.palette.customUI.main, 0.2)
  },
  avatarColor: ({
    color
  }) => ({
    color: theme.palette.common.white,
    backgroundColor: color
  }),
  typo: {
    fontWeight: 500,
    flexGrow: 1,
    textAlign: 'center'
  }
}));

const GeodeBadge$1 = _a => {
  var {
    size = 'medium',
    src,
    icon,
    name,
    color,
    className
  } = _a,
      rest = __rest(_a, ["size", "src", "icon", "name", "color", "className"]);

  const classes = useStyles$h({
    size,
    color
  });
  return jsx(Avatar, Object.assign({
    src: src,
    className: className,
    classes: {
      root: classes.root,
      colorDefault: clsx(classes.colorDefault, {
        [classes.avatarColor]: color
      })
    }
  }, rest, {
    children: name ? jsx(Typography, Object.assign({
      variant: size === 'large' ? 'h5' : size === 'medium' ? 'body1' : 'caption',
      component: "p",
      className: classes.typo
    }, {
      children: getNameInitials(name)
    })) : icon ? icon : jsx(PersonFill, {})
  }));
};

const useStyles$g = makeStyles(theme => createStyles({
  root: ({
    size,
    variant,
    lightMode
  }) => ({
    color: theme.palette.type === 'light' ? theme.palette.customUI.dark : theme.palette.customUI.light,
    backgroundColor: variant === 'outlined' ? theme.palette.background.paper : theme.palette.type === 'light' ? theme.palette.customUI.light : theme.palette.customUI.dark,
    fontSize: size === 'medium' ? 14 : 12,
    '& svg': {
      height: size === 'medium' ? 20 : 16,
      width: size === 'medium' ? 20 : 16
    },
    '& .MuiChip-icon': {
      color: theme.palette.type === 'light' ? theme.palette.customUI.dark : theme.palette.customUI.light,
      marginLeft: size === 'small' ? theme.spacing(0.75) : theme.spacing(1),
      marginRight: 0
    },
    '& .MuiChip-iconSmall': {
      height: 16,
      width: 'inherit'
    },
    '& .MuiAvatar-root': {
      marginLeft: size === 'small' ? theme.spacing(0.25) : theme.spacing(0.5),
      marginRight: 0,
      '& svg': {
        height: size === 'medium' ? 20 : 16,
        width: size === 'medium' ? 20 : 16
      }
    },
    '& .MuiChip-root .MuiChip-avatarSmall': {
      height: 20,
      width: 20
    },
    '& .MuiChip-deleteIcon': {
      height: size === 'medium' ? 18 : '',
      width: size === 'medium' ? 18 : '',
      margin: 0,
      marginRight: size === 'small' ? theme.spacing(0.75) : theme.spacing(1),
      color: lightMode ? setOpacity$1(theme.palette.customUI.dark, 0.6) : setOpacity$1(theme.palette.customUI.main, 0.6),
      '&:hover': {
        color: lightMode ? theme.palette.customUI.dark : theme.palette.customUI.main
      }
    },
    '&.MuiChip-root.Mui-disabled': {
      opacity: 1,
      backgroundColor: variant === 'tonal' ? theme.palette.action.disabledBackground : theme.palette.background.default,
      color: theme.palette.text.disabled,
      borderColor: variant === 'outlined' ? theme.palette.stroke.disabled : 'none',
      '& .MuiAvatar-root': {
        opacity: 0.5
      },
      '& .MuiChip-icon': {
        color: theme.palette.text.disabled,
        '& .MuiBadge-badge ': {
          backgroundColor: theme.palette.action.disabledBackground,
          color: theme.palette.text.disabled
        }
      }
    }
  }),
  outlined: {
    borderColor: theme.palette.type === 'light' ? theme.palette.customUI.focused : theme.palette.stroke.stroke
  },
  info: ({
    variant
  }) => ({
    '&:focus': {
      backgroundColor: variant === 'outlined' ? `${theme.palette.background.paper} !important` : theme.palette.type === 'light' ? theme.palette.customUI.light : theme.palette.customUI.dark
    }
  }),
  link: ({
    variant,
    lightMode
  }) => ({
    '&:hover': {
      backgroundImage: variant === 'outlined' ? getChipOverlayBg(theme.palette.action.hover, theme.palette.background.paper) : getChipOverlayBg(theme.palette.action.hover, lightMode ? theme.palette.customUI.light : theme.palette.customUI.dark)
    }
  }),
  LinkBtnFocus: ({
    variant,
    lightMode
  }) => ({
    '&:focus': {
      backgroundColor: variant === 'outlined' ? `${theme.palette.background.paper} !important` : lightMode ? theme.palette.customUI.light : theme.palette.customUI.dark
    }
  }),
  LinkActionFocus: ({
    variant,
    lightMode
  }) => ({
    '&:focus': {
      backgroundImage: variant === 'outlined' ? getChipOverlayBg(theme.palette.action.focus, theme.palette.background.paper) : getChipOverlayBg(theme.palette.action.focus, lightMode ? theme.palette.customUI.light : theme.palette.customUI.dark)
    }
  }),
  toggle: ({
    variant,
    lightMode
  }) => ({
    '&.MuiChip-clickable:hover': {
      backgroundImage: variant === 'outlined' ? getChipOverlayBg(theme.palette.action.hover, theme.palette.background.paper) : getChipOverlayBg(theme.palette.action.hover, lightMode ? theme.palette.customUI.light : theme.palette.customUI.dark)
    },
    '&.MuiChip-clickable:focus': {
      backgroundColor: variant === 'outlined' ? `${theme.palette.background.paper} !important` : theme.palette.type === 'light' ? theme.palette.customUI.light : theme.palette.customUI.dark
    }
  }),
  toggleSelected: ({
    variant,
    lightMode
  }) => ({
    color: variant === 'outlined' ? lightMode ? 'none' : theme.palette.customUI.light : theme.palette.customUI.contrastText,
    borderColor: variant === 'outlined' ? theme.palette.customUI.main : 'none',
    backgroundColor: variant === 'outlined' ? lightMode ? `${theme.palette.customUI.light} !important` : `${setOpacity$1(theme.palette.customUI.light, 0.3)} !important` : theme.palette.customUI.main,
    '& .MuiChip-icon': {
      color: variant === 'outlined' ? lightMode ? 'none' : theme.palette.customUI.light : theme.palette.customUI.contrastText,
      '& .MuiBadge-badge ': {
        backgroundColor: variant === 'tonal' ? theme.palette.common.white : 'none',
        color: variant === 'tonal' ? theme.palette.common.black : 'none'
      }
    },
    '&.MuiChip-clickable:hover': {
      backgroundImage: variant === 'outlined' ? getChipOverlayBg(theme.palette.action.hover, lightMode ? theme.palette.customUI.light : setOpacity$1(theme.palette.customUI.light, 0.3)) : getChipOverlayBg(theme.palette.action.hover, theme.palette.customUI.main)
    },
    '&.MuiChip-clickable:focus': {
      backgroundColor: variant === 'outlined' ? lightMode ? `${theme.palette.customUI.light} !important` : `${setOpacity$1(theme.palette.customUI.light, 0.3)} !important` : theme.palette.customUI.main
    }
  }),
  leftLabelSpace: ({
    size
  }) => ({
    paddingLeft: size === 'small' ? theme.spacing(0.75) : theme.spacing(1)
  }),
  rightLabelSpace: ({
    size
  }) => ({
    paddingRight: size === 'small' ? theme.spacing(0.75) : theme.spacing(1)
  }),
  dropdown: ({
    size
  }) => ({
    '& p': {
      display: 'flex',
      alignItems: 'center',
      '& .MuiSvgIcon-root': {
        width: size === 'medium' ? 18 : 16,
        height: size === 'medium' ? 18 : 16,
        marginLeft: size === 'medium' ? theme.spacing(0.75) : theme.spacing(0.5)
      }
    }
  }),
  chipsContainer: ({
    justifyContent,
    gap
  }) => ({
    display: 'flex',
    justifyContent: justifyContent,
    alignItems: 'center',
    flexWrap: 'wrap',
    listStyle: 'none',
    padding: theme.spacing(0),
    margin: 0,
    gap: gap
  })
}));

const GeodeChip = _a => {
  var {
    type = 'info',
    variant = 'tonal',
    size = 'medium',
    avatar,
    icon,
    badge,
    label,
    onDelete,
    onClick,
    selected = false,
    disabled = false,
    className
  } = _a,
      rest = __rest(_a, ["type", "variant", "size", "avatar", "icon", "badge", "label", "onDelete", "onClick", "selected", "disabled", "className"]);

  const theme = useTheme();
  const lightMode = theme.palette.type === 'light';
  const classes = useStyles$g({
    size,
    variant,
    lightMode
  });
  return jsx(Chip, Object.assign({
    variant: variant === 'tonal' ? 'default' : 'outlined',
    size: size,
    icon: icon ? icon : badge,
    avatar: avatar,
    label: jsxs(Typography, Object.assign({
      component: "p",
      variant: size === 'medium' ? 'body2' : 'caption'
    }, {
      children: [label, type === 'dropdown' && jsx(ArrowVarianceDown, {})]
    })),
    color: undefined,
    clickable: type !== 'info' ? true : false,
    onClick: onClick,
    deleteIcon: type === 'link' || type === 'info' ? jsx(XmarkCircleFill, {}) : undefined,
    onDelete: type === 'link' || type === 'info' ? onDelete : undefined,
    disabled: disabled,
    className: className,
    classes: {
      root: clsx(classes.root, {
        [classes.info]: type === 'info',
        [classes.link]: type === 'link' || type === 'dropdown',
        [classes.LinkBtnFocus]: (type === 'link' || type === 'dropdown') && !onDelete,
        [classes.LinkActionFocus]: type === 'link' && onDelete,
        [classes.toggle]: type === 'toggle',
        [classes.toggleSelected]: type === 'toggle' && selected
      }),
      outlined: classes.outlined,
      label: clsx({
        [classes.leftLabelSpace]: icon || avatar || badge,
        [classes.rightLabelSpace]: // (onDelete && (icon || avatar || badge)) || type === 'dropdown' ,
        onDelete || type === 'dropdown',
        [classes.dropdown]: type === 'dropdown'
      })
    }
  }, rest));
};

const ChipArray = ({
  children,
  component: _component = 'ul',
  className,
  gap: _gap = 1,
  justifyContent: _justifyContent = 'flex-start'
}) => {
  const classes = useStyles$g({
    justifyContent: _justifyContent,
    gap: _gap
  });
  return jsx(Box, Object.assign({
    component: _component,
    className: clsx(classes.chipsContainer, className)
  }, {
    children: children
  }));
};

const useStyles$f = makeStyles(theme => createStyles({
  stsChip: ({
    color,
    lightMode,
    disabled
  }) => ({
    height: 24,
    fontWeight: 500,
    borderRadius: theme.spacing(0.5),
    color: getStatusChipColor(theme, {
      isLightMode: lightMode,
      isDisabled: disabled,
      isLabel: true,
      color
    }),
    backgroundColor: `${getStatusChipColor(theme, {
      isDisabled: disabled,
      isBackground: true,
      color
    })} !important`,
    borderColor: getStatusChipColor(theme, {
      isBorder: true,
      color
    }),
    '& .MuiChip-icon': {
      color: getStatusChipColor(theme, {
        isLightMode: lightMode,
        isDisabled: disabled,
        isLabel: true,
        color
      }),
      '& .MuiBadge-badge ': {
        backgroundColor: getStatusChipColor(theme, {
          isBadge: true,
          color
        })
      }
    },
    '& .MuiChip-icon.MuiChip-iconSmall': {
      marginLeft: theme.spacing(0.5)
    },
    '& .MuiChip-avatar.MuiChip-avatarSmall': {
      marginLeft: theme.spacing(0.5)
    },
    '& .MuiChip-deleteIcon.MuiChip-deleteIconSmall': {
      marginRight: theme.spacing(0.5),
      color: setOpacity$1(getStatusChipColor(theme, {
        isLightMode: lightMode,
        isDisabled: disabled,
        isLabel: true,
        color
      }), 0.6),
      '&:hover': {
        color: getStatusChipColor(theme, {
          isLightMode: lightMode,
          isLabel: true,
          color
        })
      }
    }
  }),
  stsInfo: ({
    color
  }) => ({
    '&:focus': {
      backgroundColor: `${getStatusChipColor(theme, {
        isBackground: true,
        color
      })} !important`
    }
  }),
  stsLink: ({
    color
  }) => ({
    '&:hover': {
      backgroundImage: getChipOverlayBg(theme.palette.action.hover, getStatusChipColor(theme, {
        isBackground: true,
        color
      }))
    }
  }),
  stsBtnFocus: ({
    color
  }) => ({
    '&:focus': {
      backgroundImage: 'linear-gradient(#1C00ff00, #1C00ff00)',
      '&:hover': {
        backgroundImage: getChipOverlayBg(theme.palette.action.hover, getStatusChipColor(theme, {
          isBackground: true,
          color
        }))
      }
    }
  }),
  stsActionFocus: ({
    color
  }) => ({
    '&:focus': {
      backgroundImage: getChipOverlayBg(theme.palette.action.focus, getStatusChipColor(theme, {
        isBackground: true,
        color
      }))
    }
  }),
  stsToggle: ({
    color
  }) => ({
    '&.MuiChip-clickable:hover': {
      backgroundImage: getChipOverlayBg(theme.palette.action.hover, getStatusChipColor(theme, {
        isBackground: true,
        color
      }))
    },
    '&.MuiChip-clickable:focus': {
      backgroundColor: `${getStatusChipColor(theme, {
        isBackground: true,
        color
      })} !important`
    }
  }),
  stsToggleSelected: ({
    color,
    disabled
  }) => ({
    color: getStatusChipColor(theme, {
      isSelectedLabel: true,
      color
    }),
    backgroundColor: `${getStatusChipColor(theme, {
      isSelectedBG: true,
      isDisabled: disabled,
      color
    })}!important`,
    '& .MuiChip-icon': {
      color: getStatusChipColor(theme, {
        isSelectedIcon: true,
        color
      }),
      '& .MuiBadge-badge ': {
        backgroundColor: theme.palette.common.white,
        color: theme.palette.common.black
      }
    },
    '&.MuiChip-clickable:hover': {
      backgroundImage: getChipOverlayBg(theme.palette.action.hover, getStatusChipColor(theme, {
        isBackground: true,
        color
      }))
    },
    '&.MuiChip-clickable:focus': {
      backgroundColor: `${getStatusChipColor(theme, {
        isSelectedBG: true,
        color
      })}!important`
    }
  })
}));

const StatusChip = ({
  type: _type = 'info',
  color: _color = 'default',
  icon,
  badge,
  avatar,
  label,
  selected: _selected = false,
  disabled: _disabled = false,
  className,
  onClick,
  onDelete
}) => {
  const theme = useTheme();
  const lightMode = theme.palette.type === 'light';
  const classes = useStyles$f({
    color: _color,
    disabled: _disabled,
    lightMode
  });
  return jsx(GeodeChip, {
    variant: 'outlined',
    size: "small",
    type: _type,
    label: label,
    badge: badge,
    avatar: avatar,
    icon: icon,
    selected: _selected,
    disabled: _disabled,
    onClick: onClick,
    onDelete: onDelete,
    className: clsx(classes.stsChip, {
      [classes.stsInfo]: _type === 'info',
      [classes.stsLink]: _type === 'link' || _type === 'dropdown',
      [classes.stsBtnFocus]: (_type === 'link' || _type === 'dropdown') && !onDelete,
      [classes.stsActionFocus]: _type === 'link' && onDelete,
      [classes.stsToggle]: _type === 'toggle',
      [classes.stsToggleSelected]: _type === 'toggle' && _selected
    }, className)
  });
};

const useStyles$e = makeStyles(theme => createStyles({
  tag: ({
    variant,
    color,
    lightMode,
    iconPlacement
  }) => ({
    display: 'flex',
    gap: '2px',
    flexDirection: iconPlacement === 'start' ? 'row' : 'row-reverse',
    width: 'fit-content',
    height: '16px',
    padding: theme.spacing(0, 0.5),
    alignItems: 'center',
    boxSizing: variant === 'outlined' ? 'content-box' : 'border-box',
    color: getTagColor(theme, {
      isLabel: true,
      isLightMode: lightMode,
      variant,
      color
    }),
    backgroundColor: getTagColor(theme, {
      isBackgroundColor: true,
      variant,
      color
    }),
    border: `1px solid ${getTagColor(theme, {
      isBorder: true,
      variant,
      color
    })}`,
    borderRadius: 2
  }),
  icon: {
    height: '100%',
    width: '100%',
    '& svg': {
      height: 12,
      width: 12
    }
  },
  typo: ({
    variant
  }) => ({
    fontWeight: 500,
    fontSize: 12,
    lineHeight: variant === 'outlined' ? '18px' : '16px',
    letterSpacing: 0.4
  })
}));

const Tag = ({
  icon,
  label,
  variant: _variant = 'outlined',
  color: _color = 'default',
  iconPlacement: _iconPlacement = 'start',
  className
}) => {
  const theme = useTheme();
  const lightMode = theme.palette.type === 'light';
  const classes = useStyles$e({
    variant: _variant,
    color: _color,
    lightMode,
    iconPlacement: _iconPlacement
  });
  return jsxs("div", Object.assign({
    className: clsx(className, classes.tag)
  }, {
    children: [icon && jsx("span", Object.assign({
      className: classes.icon
    }, {
      children: icon
    })), label && jsx(Typography, Object.assign({
      variant: "caption",
      align: "center",
      className: classes.typo
    }, {
      children: label
    }))]
  }));
};

const useStyles$d = makeStyles(theme => createStyles({
  root: {
    '& .MuiSvgIcon-root': {
      fill: theme.palette.customUI.main
    }
  },
  badge: ({
    color,
    variant,
    size,
    hasChildren
  }) => ({
    minWidth: variant === 'dot' ? 8 : size === 'medium' ? 20 : 16,
    fontSize: 11,
    color: color === 'lightDefault' ? theme.palette.type === 'light' ? theme.palette.customUI.dark : theme.palette.customUI.main : getStatusChipColor(theme, {
      color,
      isSelectedLabel: true
    }),
    backgroundColor: color === 'lightDefault' ? setOpacity$1(theme.palette.customUI.main, 0.25) : getStatusChipColor(theme, {
      color,
      isSelectedBG: true
    }),
    position: !hasChildren ? 'relative' : 'absolute',
    transform: !hasChildren ? 'none' : ''
  }),
  smallSize: {
    height: 16,
    fontWeight: 500,
    padding: theme.spacing(0, 0.5)
  },
  dot: {
    border: `1px solid ${theme.palette.stroke.divider}`
  }
}));

const GeodeBadge = _a => {
  var {
    children,
    variant = 'standard',
    color = 'lightDefault',
    size = 'medium',
    overlap = 'rectangular',
    className
  } = _a,
      rest = __rest(_a, ["children", "variant", "color", "size", "overlap", "className"]);

  const classes = useStyles$d({
    variant,
    size,
    color,
    hasChildren: children ? true : false
  });
  return jsx(Badge, Object.assign({
    variant: variant,
    color: undefined,
    className: className,
    overlap: overlap,
    classes: {
      root: classes.root,
      badge: clsx(classes.badge, {
        [classes.smallSize]: variant === 'standard' && size === 'small'
      }),
      dot: classes.dot
    }
  }, rest, {
    children: children
  }));
};

const useStyles$c = makeStyles(theme => createStyles({
  root: ({
    isThumbNail,
    size,
    isSublabel
  }) => ({
    padding: size === 'medium' ? isThumbNail ? '6px 12px' // medium and has thumbnail
    : '10px 16px' // medium
    : isThumbNail ? '4px 8px' // small and has thumbnail
    : isSublabel ? '6px 12px' // medium and has sublabel
    : '6px 12px',
    width: '100%',
    minWidth: '200px',
    height: 'auto',
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'nowrap',
    alignItems: 'center',
    alignContent: 'space-between',
    columnGap: size === 'small' ? theme.spacing(1) : size === 'medium' ? theme.spacing(1.5) : theme.spacing(1),
    '&.Mui-selected': {
      backgroundColor: theme.palette.customUI.selected
    },
    '&.Mui-disabled': {
      color: theme.palette.text.disabled
    },
    '&.MuiButtonBase-root.MuiListItem-root:hover': {
      backgroundColor: theme.palette.customUI.hover
    },
    '& + .MuiListItemSecondaryAction-root, .MuiListItemSecondaryAction-root': {
      display: 'flex',
      flex: '1 0 auto',
      alignItems: 'center',
      columnGap: '12px',
      '& > span.MuiBadge-root': {
        margin: '0px 6px'
      },
      '& button, span.MuiButtonBase-root.MuiIconButton-root.MuiCheckbox-root': {
        width: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5),
        height: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5)
      }
    },
    '& > svg': {
      color: theme.palette.customUI.main
    },
    '& .MuiInputBase-root': {
      height: size === 'small' ? theme.spacing(4) : size === 'medium' ? theme.spacing(5) : theme.spacing(4)
    },
    '& div.MuiInputBase-root': {
      padding: '0px',
      margin: '0px'
    },
    '& label.MuiFormLabel-root': {
      width: '0px',
      height: '0px'
    }
  }),
  disableRipple: {
    '& > .MuiTouchRipple-root': {
      display: 'none'
    }
  },
  thumbnail: ({
    size
  }) => ({
    width: 'auto',
    height: 'auto',
    maxWidth: size === 'small' ? '54px' : size === 'medium' ? '68px' : '54px',
    maxHeight: size === 'small' ? '40px' : size === 'medium' ? '52px' : '40px',
    display: 'block',
    marginLeft: 'auto',
    marginRight: 'auto',
    borderRadius: '4px'
  }),
  thumbnailSection: ({
    size
  }) => ({
    width: size === 'small' ? '54px' : size === 'medium' ? '68px' : '54px',
    height: size === 'small' ? '40px' : size === 'medium' ? '52px' : '40px'
  }),
  labelSection: {
    margin: '0px'
  },
  label: ({
    size
  }) => ({
    letterSpacing: '0.2px',
    lineHeight: size === 'small' ? '16px' : '22px',
    textAlign: 'left',
    verticalAlign: 'center',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    // height: size === "small" ? "16px" : size === "medium" ? "22px" : "16px",
    fontSize: size === 'small' ? '12px' : size === 'medium' ? '14px' : '12px',
    color: theme.palette.text.primary
  }),
  subtitle: {
    letterSpacing: '0.4px',
    lineHeight: '16px',
    textAlign: 'left',
    verticalAlign: 'center',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    height: '16px',
    fontSize: '11px',
    color: theme.palette.text.secondary
  },
  avatar: ({
    size
  }) => ({
    width: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5),
    height: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5),
    '& .MuiAvatar-root': {
      width: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5),
      height: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5)
    },
    '& svg': {
      width: theme.spacing(2),
      padding: 0
    },
    '& p': {
      fontSize: size === 'small' ? theme.spacing(1.5) : size === 'medium' ? theme.spacing(1.75) : theme.spacing(1.5)
    }
  }),
  badge: ({
    size
  }) => ({
    '& .MuiAvatar-root': {
      width: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5),
      height: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5)
    }
  }),
  icon: ({
    size
  }) => ({
    width: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5),
    height: size === 'small' ? theme.spacing(2.5) : size === 'medium' ? theme.spacing(3) : theme.spacing(2.5),
    color: theme.palette.customUI.main
  }),
  nestedList: {
    paddingLeft: theme.spacing(4)
  },
  nestedListItem: {
    '& > li': {
      height: '42px'
    }
  },
  secondaryActions: ({
    size
  }) => ({
    display: 'flex',
    alignItems: 'center',
    '& > .MuiSvgIcon-root, .MuiBadge-root': {
      display: 'flex',
      margin: size === 'small' ? '0px 4px' : '0px 6px'
    },
    '& > *:not(.MuiIconButton-root)': {
      margin: size === 'small' ? '0px 4px' : '0px 6px'
    },
    '& > *:last-child': {
      marginRight: '0px'
    }
  })
}));

const GeodeListItem = _a => {
  var {
    size = 'medium',
    children,
    button,
    alignItems,
    label,
    subtitle,
    avatar,
    badge,
    icon,
    thumbnail,
    avatarName,
    prefixActions,
    nestedList,
    openList = false,
    cancelRipple = false
  } = _a,
      // disabled,
  rest = __rest(_a, ["size", "children", "button", "alignItems", "label", "subtitle", "avatar", "badge", "icon", "thumbnail", "avatarName", "prefixActions", "nestedList", "openList", "cancelRipple"]);

  const isSublabel = subtitle ? true : false;
  const isThumbNail = thumbnail ? true : false;
  const classes = useStyles$c({
    isSublabel,
    isThumbNail,
    size
  });
  return !nestedList ? jsxs(ListItem, Object.assign({}, rest, {
    button: button,
    classes: {
      root: clsx(classes.root, {
        [classes.disableRipple]: cancelRipple
      })
    }
  }, {
    children: [React.Children.map(prefixActions, (action, i) => /*#__PURE__*/React.cloneElement(action, {
      size: size
    })), (avatar || avatarName || thumbnail || badge) && (avatar || avatarName) ? jsx(GeodeBadge$1, {
      name: avatarName || undefined,
      icon: avatar,
      className: `${classes.avatar}`
    }) : thumbnail ? typeof thumbnail === 'string' ? jsx("div", Object.assign({
      className: clsx(classes.thumbnailSection)
    }, {
      children: jsx("img", {
        src: `${thumbnail}`,
        alt: "list item thumb nail",
        className: clsx(classes.thumbnail)
      })
    })) : thumbnail : badge ? /*#__PURE__*/React.cloneElement(badge, {
      className: `${classes.badge}`
    }) : icon ? /*#__PURE__*/React.cloneElement(icon, {
      className: `${classes.icon}`
    }) : null, (label || subtitle) && jsx(ListItemText, {
      primary: label ? jsx(Typography, Object.assign({
        variant: "body2",
        className: `${classes.label}`
      }, {
        children: label
      })) : null,
      secondary: subtitle ? jsx(Typography, Object.assign({
        className: `${classes.subtitle}`
      }, {
        children: subtitle
      })) : null,
      classes: {
        root: classes.labelSection
      }
    }), jsx("div", Object.assign({
      className: `${classes.secondaryActions}`
    }, {
      children: React.Children.map(children, child => {
        if (!child) return null;
        return /*#__PURE__*/React.cloneElement(child, {
          disabled: rest.disabled ? true : false
        });
      })
    }))]
  })) : jsxs("div", {
    children: [jsxs(ListItem, Object.assign({}, rest, {
      classes: {
        root: classes.root
      },
      button: button
    }, {
      children: [React.Children.map(prefixActions, (action, i) => /*#__PURE__*/React.cloneElement(action, {
        size: size
      })), (avatar || avatarName || thumbnail || badge) && (avatar || avatarName) ? jsx(GeodeBadge$1, {
        name: avatarName || undefined,
        icon: avatar,
        className: `${classes.avatar}`
      }) : thumbnail ? typeof thumbnail === 'string' ? jsx("div", Object.assign({
        className: clsx(classes.thumbnailSection)
      }, {
        children: jsx("img", {
          src: `${thumbnail}`,
          alt: "list item thumb nail",
          className: clsx(classes.thumbnail)
        })
      })) : thumbnail : badge ? /*#__PURE__*/React.cloneElement(badge, {
        className: `${classes.badge}`
      }) : icon ? /*#__PURE__*/React.cloneElement(icon, {
        className: `${classes.icon}`
      }) : null, (label || subtitle) && jsx(ListItemText, {
        primary: label ? jsx(Typography, Object.assign({
          className: `${classes.label}`
        }, {
          children: label
        })) : null,
        secondary: subtitle ? jsx(Typography, Object.assign({
          className: `${classes.subtitle}`
        }, {
          children: subtitle
        })) : null
      }), jsx("div", Object.assign({
        className: `${classes.secondaryActions}`
      }, {
        children: React.Children.map(children, child => {
          if (!child) return null;
          return /*#__PURE__*/React.cloneElement(child, {
            disabled: rest.disabled ? true : false
          });
        })
      }))]
    })), nestedList && jsx(Collapse, Object.assign({
      classes: {
        root: classes.nestedList
      },
      in: openList,
      timeout: "auto",
      unmountOnExit: true
    }, {
      children: React.Children.map(nestedList, nestedListItem => {
        return /*#__PURE__*/React.cloneElement(nestedListItem, {
          className: `${classes.nestedListItem}`
        });
      })
    }))]
  });
};

const useStyles$b = makeStyles(theme => createStyles({
  root: {
    width: '100%'
  },
  subheader: {
    paddingLeft: '14px',
    paddingTop: '16px',
    paddingRight: '14px',
    paddingBottom: '8px',
    color: theme.palette.customUI.main,
    '& > p': {
      font: 'Roboto',
      fontSize: '10px',
      lineHeight: '16px',
      letterSpacing: '1.5px',
      textTransform: 'uppercase'
    },
    fontSize: '10px',
    lineHeight: '16px',
    letterSpacing: '1.5px',
    textTransform: 'uppercase'
  }
}));

const GeodeList = _a => {
  var {
    children,
    subheader
  } = _a,
      rest = __rest(_a, ["children", "subheader"]);

  const classes = useStyles$b();
  return jsx(List, Object.assign({}, rest, {
    classes: {
      root: classes.root
    },
    subheader: typeof subheader === 'string' ? jsx(ListSubheader, Object.assign({
      classes: {
        root: classes.subheader
      }
    }, {
      children: subheader
    })) : subheader
  }, {
    children: children
  }));
};

const useStyles$a = makeStyles$1(theme => createStyles$1({
  root: Object.assign({
    backgroundColor: theme.palette.miscellaneous.tooltip || '',
    color: theme.palette.type === 'dark' ? theme.palette.getContrastText('#FFF') : ''
  }, theme.typography.caption)
}));
function GeodeTooltip(_a) {
  var {
    children
  } = _a,
      rest = __rest(_a, ["children"]);

  const classes = useStyles$a();
  return jsx(Tooltip, Object.assign({
    classes: {
      tooltip: classes.root
    }
  }, rest, {
    children: children
  }));
}

const useStyles$9 = makeStyles(() => createStyles({
  root: {
    fontSize: "10px",
    lineHeight: "24px",
    lineSpacing: "1.5px",
    fontWeight: 500
  }
}));

const TypographyOverlineSM = _a => {
  var {
    className,
    children
  } = _a,
      rest = __rest(_a, ["className", "children"]);

  const classes = useStyles$9();
  return jsx(Typography, Object.assign({
    className: clsx(classes.root, className)
  }, rest, {
    children: children
  }));
};

const useStyles$8 = makeStyles$1(theme => createStyles$1({
  disabled: {
    '&:hover': {
      backgroundColor: 'inherit'
    },
    cursor: 'default',
    opacity: 0.5
  },
  divider: {
    backgroundColor: theme.palette.getContrastText(theme.palette.customUI.main),
    height: '100%'
  },
  gutters: ({
    depth
  }) => ({
    padding: theme.spacing(1, 2, 1, 2 + 4 * depth)
  }),
  header: {
    paddingLeft: theme.spacing(2)
  },
  horizontalGutters: {
    padding: theme.spacing(1)
  },
  horizontalitemGroup: {
    '&:hover': {
      backgroundColor: theme.palette.action.hover
    },
    alignItems: 'center',
    borderRadius: 4,
    color: theme.palette.text.primary,
    cursor: 'pointer',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    minWidth: 75
  },
  icon: {
    minWidth: 36
  },
  itemGroup: ({
    open
  }) => ({
    width: open ? '220px' : '56px',
    borderRadius: 4,
    minHeight: 48,
    color: theme.palette.text.primary
  }),
  justifyItems: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'space-between',
    width: '100%'
  },
  rightIcons: {
    justifySelf: 'flex-end',
    left: theme.spacing(2),
    minWidth: 36,
    position: 'relative'
  },
  collapsedJustifyItems: {
    display: 'flex',
    justifyContent: 'center'
  },
  collapsedRightIcons: {
    left: theme.spacing(-1.87),
    position: 'relative',
    maxHeight: 24,
    display: 'flex',
    alignItems: 'center',
    '& .MuiSvgIcon-root': {
      width: '0.8em',
      height: '0.8em'
    }
  },
  selected: {
    backgroundColor: theme.palette.action.selected
  },
  sideGutters: {
    margin: theme.spacing(0, 1)
  },
  userItemGroup: ({
    open
  }) => ({
    minHeight: 60,
    padding: open ? theme.spacing(0.5, 0.75) : theme.spacing(0.5, 0.2),
    color: theme.palette.customUI.main,
    '&:hover': {
      backgroundColor: open ? '' : 'inherit'
    }
  }),
  userPrimaryText: {
    fontWeight: 500,
    fontSize: theme.typography.fontSize,
    lineHeight: '16px',
    letterSpacing: '.4px'
  },
  userTextItems: {
    paddingLeft: theme.spacing(0.25)
  },
  userSecondaryText: {
    fontWeight: 400,
    fontSize: '11px',
    lineHeight: '16px',
    letterSpacing: '.4px'
  },
  rightSideItems: {
    display: 'flex',
    alignItems: 'center'
  },
  badge: {
    fontSize: 11,
    width: 28,
    height: 16
  },
  rightBadge: {
    display: 'inline-flex',
    alignContent: 'center',
    right: '12px',
    top: '8px'
  }
}));
const HelperNavItem = ({
  chevron: _chevron = false,
  disabled: _disabled = false,
  icon,
  id,
  onClick,
  open,
  orientation: _orientation = 'vertical',
  text,
  tooltipText,
  showTooltip: _showTooltip = true
}) => {
  const classes = useStyles$8({
    open
  });
  return _orientation === 'vertical' ? jsx(GeodeTooltip, Object.assign({
    "aria-label": tooltipText || text,
    placement: "right",
    title: _showTooltip ? tooltipText || text || false : ''
  }, {
    children: jsxs(ListItem, Object.assign({
      button: true,
      className: clsx(classes.itemGroup, classes.gutters),
      disabled: _disabled,
      id: id,
      onClick: onClick
    }, {
      children: [icon && jsx(ListItemIcon, Object.assign({
        className: classes.icon
      }, {
        children: icon
      })), open && text && jsxs("div", Object.assign({
        className: classes.justifyItems
      }, {
        children: [jsx(Typography, Object.assign({
          variant: "body2"
        }, {
          children: text
        })), _chevron && jsx(ListItemIcon, Object.assign({
          className: classes.rightIcons
        }, {
          children: jsx(ChevronRight, {})
        }))]
      }))]
    }))
  })) : jsxs("div", Object.assign({
    // add selected styles
    className: clsx(classes.horizontalitemGroup, classes.horizontalGutters, {
      [classes.disabled]: _disabled
    }),
    onClick: event => {
      if (_disabled) return;

      if (onClick) {
        onClick(event);
      }
    }
  }, {
    children: [icon, jsx(Typography, Object.assign({
      variant: "body2"
    }, {
      children: text
    }))]
  }));
};
const UserNavItem = ({
  open,
  onClick,
  className,
  text,
  subText,
  userImageSrc
}) => {
  const classes = useStyles$8({
    open
  });
  return jsxs(ListItem, Object.assign({
    button: true,
    className: clsx(className, classes.itemGroup, classes.userItemGroup),
    onClick: event => {
      if (onClick) {
        onClick(event);
      }
    }
  }, {
    children: [userImageSrc ? jsx(ListItemAvatar, {
      children: jsx(Avatar, {
        src: userImageSrc
      })
    }) : jsx(IconButton, Object.assign({
      color: "inherit",
      "aria-label": "user"
    }, {
      children: jsx(PersonIcon, {})
    })), open && text && jsx(ListItemText, {
      primary: text,
      secondary: subText,
      classes: {
        primary: classes.userPrimaryText,
        secondary: classes.userSecondaryText,
        multiline: classes.userTextItems
      }
    })]
  }));
};
const NavItem = ({
  chevron: _chevron2 = false,
  className,
  depth: _depth = 0,
  badgeCount,
  disabled: _disabled2 = false,
  icon,
  id,
  onClick,
  onMouseEnter,
  onMouseLeave,
  onMouseMove,
  onMouseOver,
  open,
  orientation: _orientation2 = 'vertical',
  selected: _selected = false,
  text,
  tooltipText,
  style,
  showTooltip: _showTooltip2 = true
}) => {
  const classes = useStyles$8({
    open,
    depth: _depth
  });
  return _orientation2 === 'vertical' ? jsx(GeodeTooltip, Object.assign({
    "aria-label": tooltipText || text,
    placement: "right",
    title: _showTooltip2 ? tooltipText || text || false : ''
  }, {
    children: jsxs(ListItem, Object.assign({
      button: true,
      className: clsx(className, classes.itemGroup, classes.gutters),
      disabled: _disabled2,
      id: id,
      onClick: event => {
        if (onClick) {
          onClick(event);
        }
      },
      onMouseEnter: event => {
        if (onMouseEnter) {
          onMouseEnter(event);
        }
      },
      onMouseLeave: event => {
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      },
      onMouseMove: event => {
        if (onMouseMove) {
          onMouseMove(event);
        }
      },
      onMouseOver: event => {
        if (onMouseOver) {
          onMouseOver(event);
        }
      },
      selected: _selected,
      style: style
    }, {
      children: [jsxs("div", Object.assign({
        className: classes.collapsedJustifyItems
      }, {
        children: [!open && icon && badgeCount ? jsx(ListItemIcon, Object.assign({
          className: classes.icon
        }, {
          children: jsx(Badge, Object.assign({
            color: "primary",
            badgeContent: badgeCount,
            overlap: "rectangular",
            max: 999,
            classes: {
              badge: classes.badge
            }
          }, {
            children: icon
          }))
        })) : icon && jsx(ListItemIcon, Object.assign({
          className: classes.icon
        }, {
          children: icon
        })), !open ? typeof _chevron2 === 'boolean' && _chevron2 ? jsx("span", Object.assign({
          className: classes.collapsedRightIcons
        }, {
          children: jsx(ChevronRight, {})
        })) : _chevron2 && jsx("span", Object.assign({
          className: classes.collapsedRightIcons
        }, {
          children: _chevron2
        })) : '']
      })), open && text && jsxs("div", Object.assign({
        className: classes.justifyItems
      }, {
        children: [jsx(Typography, Object.assign({
          variant: "body2"
        }, {
          children: text
        })), jsxs("div", Object.assign({
          className: classes.rightSideItems
        }, {
          children: [badgeCount && jsx(Badge, {
            color: "primary",
            overlap: "rectangular",
            badgeContent: badgeCount,
            max: 999,
            className: clsx(classes.badge, classes.rightBadge)
          }), _chevron2 && typeof _chevron2 === 'boolean' ? jsx(ListItemIcon, Object.assign({
            className: classes.rightIcons
          }, {
            children: jsx(ChevronRight, {})
          })) : _chevron2 && jsx(ListItemIcon, Object.assign({
            className: classes.rightIcons
          }, {
            children: _chevron2
          }))]
        }))]
      }))]
    }))
  })) : jsxs("div", Object.assign({
    className: clsx(classes.horizontalitemGroup, classes.sideGutters, classes.horizontalGutters, {
      [classes.selected]: _selected,
      [classes.disabled]: _disabled2
    }),
    onClick: event => {
      if (_disabled2) return;

      if (onClick) {
        onClick(event);
      }
    }
  }, {
    children: [icon, jsx(Typography, Object.assign({
      variant: "body2"
    }, {
      children: text
    }))]
  }));
};

const NavItems = ({
  children,
  divider: _divider = false,
  header,
  open,
  orientation: _orientation3 = 'vertical'
}) => {
  const classes = useStyles$8({
    open
  });
  return _orientation3 === 'vertical' ? jsxs(List, {
    children: [header || _divider ? jsxs("div", Object.assign({
      style: {
        minHeight: 28
      }
    }, {
      children: [header && open && jsx(TypographyOverlineSM, Object.assign({
        className: classes.header,
        variant: "overline",
        color: "textSecondary"
      }, {
        children: header
      })), _divider && !open && jsx(Divider, {})]
    })) : null, children]
  }) : jsxs(Fragment, {
    children: [_divider && jsx("div", Object.assign({
      className: classes.sideGutters
    }, {
      children: jsx(Divider, {
        orientation: "vertical",
        className: classes.divider
      })
    })), children]
  });
};

const drawerWidthOpen = 240;
const drawerWidthClosed = 64;
const useStyles$7 = makeStyles$1(theme => createStyles$1({
  appBar: {
    bottom: 0,
    top: 'auto'
  },
  appName: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    marginLeft: theme.spacing(1),
    color: theme.palette.text.primary
  },
  toolBar: ({
    open
  }) => ({
    [theme.breakpoints.down('xs')]: {
      marginLeft: 0,
      width: '100%'
    },
    backgroundColor: theme.palette.background.default,
    color: theme.palette.customUI.main,
    flexGrow: 1,
    height: 64,
    position: 'fixed',
    top: 0,
    zIndex: 1000,
    marginLeft: open ? drawerWidthOpen : drawerWidthClosed,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: open ? theme.transitions.easing.sharp : theme.transitions.easing.easeInOut,
      duration: open ? theme.transitions.duration.enteringScreen : theme.transitions.duration.leavingScreen
    }),
    width: open ? `calc(100% - ${drawerWidthOpen}px)` : `calc(100% - ${drawerWidthClosed}px)`,
    left: 0
  }),
  drawer: {
    [theme.breakpoints.down('xs')]: {
      zIndex: 15000
    },
    flexShrink: 0,
    whiteSpace: 'nowrap'
  },
  drawerButtonContainer: {
    minHeight: '24px',
    '& .MuiList-padding': {
      paddingTop: '0px',
      paddingBottom: '0px'
    }
  },
  drawerButton: {
    minHeight: '24px',
    justifyContent: 'center',
    width: '100%',
    padding: 0
  },
  drawerIcon: {
    margin: '0 auto',
    transform: 'rotate(45deg)',
    fill: theme.palette.customUI.main,
    fontSize: '14px'
  },
  drawerIconClose: {
    margin: '0 auto',
    transform: 'rotate(45deg)',
    fill: theme.palette.customUI.main,
    fontSize: '14px'
  },
  drawerClose: ({
    clipped
  }) => ({
    [theme.breakpoints.up('xs')]: {
      width: drawerWidthClosed
    },
    border: 'none',
    overflowX: 'hidden',
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.leavingScreen
    }),
    marginTop: clipped ? 56 : 0,
    height: clipped ? 'calc(100% - 56px)' : '100%',
    backgroundColor: theme.palette.customUI.background,
    borderRight: theme.palette.borders.divider
  }),
  drawerOpen: ({
    clipped
  }) => ({
    border: 'none',
    overflowX: 'hidden',
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.enteringScreen
    }),
    marginTop: clipped ? 56 : 0,
    backgroundColor: theme.palette.customUI.background,
    width: drawerWidthOpen,
    height: clipped ? 'calc(100% - 56px)' : '100%',
    boxSizing: 'border-box',
    borderRight: theme.palette.borders.divider
  }),
  drawerPaper: {
    backgroundColor: theme.palette.customUI.background,
    overflow: 'auto',
    width: drawerWidthOpen,
    borderRight: theme.palette.borders.divider
  },
  gutters: {
    padding: theme.spacing(0, 3)
  },
  headerContainer: ({
    onLogoClick
  }) => ({
    width: '100%',
    minHeight: theme.spacing(6),
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    cursor: onLogoClick ? 'pointer' : 'auto',
    padding: theme.spacing(0, 1.25),
    margin: theme.spacing(1, 0)
  }),
  logoContainer: {
    display: 'flex',
    '& svg': {
      height: 34,
      width: 34
    }
  },
  navContentContainer: {
    display: 'flex',
    flexDirection: 'column',
    '& > *:last-child': {
      marginTop: 'auto'
    },
    padding: theme.spacing(0, 0.75),
    overflow: 'hidden',
    height: '100%',
    position: 'relative'
  },
  navItemsContainer: {
    boxSizing: 'border-box',
    overflow: 'hidden',
    overflowY: 'auto',
    '&::-webkit-scrollbar': {
      display: 'none'
    }
  },
  navItemGroups: ({
    open
  }) => ({
    '& .MuiListItem-button': {
      minHeight: '40px',
      width: '100%',
      color: theme.palette.customUI.main,
      padding: open ? '' : theme.spacing(0, 1.68),
      margin: theme.spacing(0.5, 0)
    },
    '& .MuiCollapse-wrapper .MuiListItem-button': {
      margin: 0
    },
    '& .Mui-selected': {
      backgroundColor: theme.palette.customUI.selected,
      color: theme.palette.type === 'dark' ? theme.palette.customUI.light : theme.palette.customUI.dark
    }
  }),
  mainActionBtn: {
    margin: theme.spacing(2, 0, 1.5, 0),
    '& .MuiButton-containedPrimary': {
      height: 32,
      width: '100%',
      minWidth: 'auto'
    },
    '& .MuiButton-label': {
      justifyContent: 'flex-start',
      padding: 2
    }
  },
  bottomNavItemContainer: {
    bottom: 0,
    boxSizing: 'border-box',
    paddingBottom: '12px',
    backgroundColor: theme.palette.customUI.background,
    zIndex: 1500,
    padding: theme.spacing(1.5, 0)
  },
  helperAction: ({
    open
  }) => ({
    '& .MuiListItem-button': {
      width: open ? '228px' : '52px'
    },
    paddingTop: 0,
    paddingBottom: 0
  }),
  userNavItemContainer: ({
    open
  }) => ({
    '& .MuiListItem-button': {
      width: open ? '228px' : '52px'
    }
  }),
  icons: {
    color: theme.palette.customUI.main
  }
}));
const ClippedDrawer = _a => {
  var {
    logo,
    appName,
    children,
    clipped,
    helperActions,
    userNavItem,
    mainAction,
    onLogoClick,
    onRailToggle,
    open
  } = _a,
      rest = __rest(_a, ["logo", "appName", "children", "clipped", "helperActions", "userNavItem", "mainAction", "onLogoClick", "onRailToggle", "open"]);

  const classes = useStyles$7({
    onLogoClick,
    open,
    clipped,
    helperActions
  });
  return jsxs(Drawer, Object.assign({
    classes: {
      paper: clsx({
        [classes.drawerOpen]: open,
        [classes.drawerClose]: !open
      })
    },
    open: open
  }, rest, {
    children: [onRailToggle && jsx("div", Object.assign({
      className: classes.drawerButtonContainer
    }, {
      children: jsx(NavItems, Object.assign({
        open: open
      }, {
        children: jsx(NavItem, {
          className: classes.drawerButton,
          tooltipText: open ? 'Collapse Rail' : 'Expand Rail',
          icon: open ? jsx(Arrow2ExpandCollapse, {
            className: clsx({
              [classes.drawerIconClose]: !open,
              [classes.drawerIcon]: open
            })
          }) : jsx(Arrow2Expand, {
            className: clsx({
              [classes.drawerIconClose]: !open,
              [classes.drawerIcon]: open
            })
          }),
          open: open,
          onClick: onRailToggle
        })
      }))
    })), jsxs("div", Object.assign({
      className: classes.navContentContainer
    }, {
      children: [!clipped && logo && appName && jsxs("div", Object.assign({
        className: classes.headerContainer,
        onClick: onLogoClick
      }, {
        children: [logo && jsx("div", Object.assign({
          className: classes.logoContainer
        }, {
          children: logo
        })), appName && jsx(Fade, Object.assign({
          in: open
        }, {
          children: jsx(Typography, Object.assign({
            className: classes.appName,
            variant: "h6"
          }, {
            children: appName
          }))
        }))]
      })), mainAction && jsx("div", Object.assign({
        className: classes.mainActionBtn
      }, {
        children: mainAction
      })), jsx("div", Object.assign({
        className: classes.navItemsContainer
      }, {
        children: jsx("div", Object.assign({
          className: clsx('Main-Nav-Items', classes.navItemGroups)
        }, {
          children: children
        }))
      })), (helperActions || userNavItem) && jsxs("div", Object.assign({
        className: classes.bottomNavItemContainer
      }, {
        children: [helperActions && jsx(List, Object.assign({
          className: clsx('Main-Nav-Items', classes.navItemGroups, classes.helperAction)
        }, {
          children: helperActions
        })), userNavItem && jsx("div", Object.assign({
          className: classes.userNavItemContainer
        }, {
          children: userNavItem
        }))]
      }))]
    }))]
  }));
};

const ClippedRail = _a => {
  var {
    logo,
    appName,
    children,
    clipped,
    helperActions,
    userNavItem,
    mainAction,
    onClose,
    onLogoClick,
    onRailToggle,
    open,
    variant
  } = _a,
      rest = __rest(_a, ["logo", "appName", "children", "clipped", "helperActions", "userNavItem", "mainAction", "onClose", "onLogoClick", "onRailToggle", "open", "variant"]);

  const classes = useStyles$7({
    onLogoClick,
    open,
    clipped,
    helperActions
  });
  return jsxs("nav", Object.assign({
    className: classes.drawer
  }, {
    children: [jsx(Hidden, Object.assign({
      xsDown: true,
      implementation: "js"
    }, {
      children: jsx(ClippedDrawer, Object.assign({}, rest, {
        variant: variant || 'permanent' || 'persistent',
        open: open,
        onClose: onClose,
        ModalProps: {
          keepMounted: true,
          BackdropProps: {
            invisible: true
          },
          style: {
            position: 'absolute'
          }
        },
        logo: logo || jsx(EogLogoCircleFill, {}),
        appName: appName || "EOG",
        children: children,
        clipped: clipped,
        helperActions: helperActions,
        userNavItem: clipped ? undefined : userNavItem,
        mainAction: mainAction,
        onLogoClick: onLogoClick,
        onRailToggle: onRailToggle
      }))
    })), jsxs(Hidden, Object.assign({
      smUp: true,
      implementation: "js"
    }, {
      children: [!clipped && jsx(Toolbar, Object.assign({
        className: classes.toolBar
      }, {
        children: jsx(Tooltip, Object.assign({
          title: "Toggle Rail Collapse"
        }, {
          children: jsx(IconButton, Object.assign({
            edge: "start",
            color: "inherit",
            "aria-label": "menu",
            onClick: onRailToggle
          }, {
            children: jsx(MenuIcon, {})
          }))
        }))
      })), jsx(ClippedDrawer, Object.assign({}, rest, {
        variant: "temporary",
        anchor: "left",
        open: open,
        onClose: onClose,
        classes: {
          paper: classes.drawerPaper
        },
        ModalProps: {
          BackdropProps: {
            invisible: true
          }
        },
        clipped: false,
        logo: logo || jsx(EogLogoCircleFill, {}),
        appName: appName || "EOG",
        children: children,
        helperActions: helperActions,
        userNavItem: userNavItem,
        mainAction: mainAction,
        onLogoClick: onLogoClick
      }))]
    }))]
  }));
};

function SvgEogLogoFlameBw(props) {
  return jsxs(SvgIcon, Object.assign({
    height: '1em',
    width: '1em',
    viewBox: props.viewBox || '0 0 30 30',
    xmlns: "http://www.w3.org/2000/svg"
  }, props, {
    children: [jsx("defs", {
      children: jsx("path", {
        d: "M19.961 7.038a5.668 5.668 0 00-2.069 2.666c-.456 1.216-.469 2.442.123 3.61.448.887 1.081 1.688 1.431 2.616a4.7 4.7 0 01-.253 3.906c-1.152 2.17-4.071 3.901-6.692 2.846-2.514-1.012-3.065-3.89-1.956-6.013.61-1.17 1.725-1.932 2.026-3.229.217-.931.571-2.621 1.627-3.092-.296.377-.38.602-.453 1.181-.29 2.307 1.223 3.154.915 3.744-.266.599-1.868 1.467-2.336 1.952a3.365 3.365 0 00-.926 2.753c.245 2.122 2.847 2.918 4.667 1.87 1.692-.976 2.722-3.148 1.68-4.875-.555-.92-1.553-1.538-2.13-2.438-.685-1.07-.748-2.25-.432-3.445.278-1.055.885-1.74 1.792-2.463.886-.709 3.363-1.85 2.986-1.589zm-5.148 8.302c0 .038.42.491.866.98l.245.268c.282.311.548.61.694.796.555.703.563 1.568.185 2.374-.665 1.42-3.293 2.495-4.16.63-.376-.81-.075-1.723.51-2.373.334-.371.897-.695 1.256-1.042.459-.443.544-.998.404-1.633z",
        id: "eog-logo-flame-bw_svg__a"
      })
    }), jsxs("g", Object.assign({
      fill: "none",
      fillRule: "evenodd"
    }, {
      children: [jsx("path", {
        d: "M15 .75c3.935 0 7.498 1.595 10.076 4.174A14.205 14.205 0 0129.25 15c0 3.935-1.595 7.498-4.174 10.076A14.205 14.205 0 0115 29.25a14.205 14.205 0 01-10.076-4.174A14.205 14.205 0 01.75 15c0-3.935 1.595-7.498 4.174-10.076A14.205 14.205 0 0115 .75z",
        stroke: "#FFF",
        fill: "#121212",
        fillRule: "nonzero"
      }), jsx("use", {
        fill: "#FFF",
        xlinkHref: "#eog-logo-flame-bw_svg__a"
      })]
    }))]
  }));
}

const useStyles$6 = makeStyles$1(theme => createStyles$1({
  AppBar: {
    backgroundColor: theme.palette.customUI.background,
    color: theme.palette.customUI.main,
    flexGrow: 1,
    height: 56
  },
  appName: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  clearMargin: {
    margin: 0
  },
  divider: ({
    height
  }) => ({
    backgroundColor: theme.palette.miscellaneous.divider,
    height: height * 0.6
  }),
  headerContainer: ({
    onLogoClick
  }) => ({
    alignItems: 'center',
    cursor: onLogoClick ? 'pointer' : 'auto',
    display: 'flex',
    flex: '1 1 auto'
  }),
  leftItems: {
    [theme.breakpoints.down('sm')]: {
      gridArea: 'left-items'
    },
    display: 'flex',
    flexGrow: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
    gap: theme.spacing(),
    maxWidth: '20vw',
    height: '100%'
  },
  centerItems: {
    [theme.breakpoints.down('sm')]: {
      gridArea: 'center-items'
    },
    display: 'flex',
    flexGrow: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
    width: '100%',
    height: '100%'
  },
  icons: {
    color: theme.palette.customUI.main
  },
  logo: {
    fontSize: 36
  },
  logoContainer: {
    display: 'flex',
    margin: theme.spacing(0, 1.75, 0, 1),
    '& svg': {
      height: 34,
      width: 34
    }
  },
  menuButton: {
    [theme.breakpoints.down('sm')]: {
      gridArea: 'menu-button',
      margin: 0
    },
    marginRight: theme.spacing(4)
  },
  paper: {
    boxShadow: theme.shadows[0],
    borderBottom: theme.palette.borders.divider
  },
  rightItems: {
    [theme.breakpoints.down('sm')]: {
      gridArea: 'right-items'
    },
    alignItems: 'center',
    display: 'flex',
    flexGrow: 1,
    justifyContent: 'flex-end',
    minWidth: '15%',
    height: '100%',
    gap: 8,
    '& .MuiAvatar-root': {
      border: `1px solid ${theme.palette.stroke.stroke}`,
      margin: 8
    }
  },
  sideGutters: {
    padding: theme.spacing(0, 0.5, 0, 0.5)
  },
  tabs: {
    [theme.breakpoints.down('xs')]: {
      '& .MuiTabs-flexContainer': {
        height: '100%',
        marginLeft: 'calc(100vw - 50vw)'
      },
      gridArea: 'tabs',
      margin: 0
    },
    '& .MuiTabs-flexContainer': {
      height: '100%'
    },
    display: 'flex',
    flexGrow: 1,
    height: '100%',
    justifyContent: 'flex-start',
    maxWidth: 750
  },
  toolBar: ({
    tabs
  }) => ({
    gap: theme.spacing(2),
    minHeight: 56,
    [theme.breakpoints.down('xs')]: tabs ? {
      display: 'grid',
      minHeight: 112,
      gridTemplateColumns: '48px 1fr 1fr',
      gridTemplateAreas: `
                'menu-button left-items right-items'
                'tabs tabs tabs'
                `
    } : {}
  })
}));

const FullAppBar = _a => {
  var {
    appActions,
    appName,
    centerContextActions,
    children,
    className,
    leftContextActions,
    logo,
    onLogoClick,
    onRailToggle,
    railOrientation = 'vertical',
    tabs,
    workerImage
  } = _a,
      rest = __rest(_a, ["appActions", "appName", "centerContextActions", "children", "className", "leftContextActions", "logo", "onLogoClick", "onRailToggle", "railOrientation", "tabs", "workerImage"]);

  const {
    ref,
    height = 1
  } = useResizeObserver();
  const classes = useStyles$6({
    height,
    tabs,
    onLogoClick
  });
  const phone = useMediaQuery('(max-width: 600px)');
  const smallTablet = useMediaQuery('(max-width: 900px)');
  return jsx(AppBar, Object.assign({}, rest, {
    className: clsx(className, classes.AppBar, classes.paper),
    position: "fixed"
  }, {
    children: jsxs(Toolbar, Object.assign({
      className: clsx(classes.toolBar, classes.sideGutters)
    }, {
      children: [jsxs("div", Object.assign({
        className: clsx(classes.sideGutters, classes.headerContainer)
      }, {
        children: [onRailToggle && smallTablet && jsx(GeodeTooltip, Object.assign({
          title: "Toggle Rail Collapse"
        }, {
          children: jsx(IconButton, Object.assign({
            edge: "start",
            className: clsx(classes.menuButton, classes.icons),
            "aria-label": "menu",
            onClick: onRailToggle
          }, {
            children: jsx(MenuIcon, {})
          }))
        })), !phone && jsxs("div", Object.assign({
          onClick: onLogoClick,
          style: {
            display: 'flex',
            flexWrap: 'nowrap'
          }
        }, {
          children: [jsx("div", Object.assign({
            className: classes.logoContainer
          }, {
            children: logo || jsx(SvgEogLogoFlameBw, {
              className: classes.logo
            })
          })), jsx(Typography, Object.assign({
            className: classes.appName,
            variant: "h6",
            color: "textPrimary"
          }, {
            children: appName || 'EOG'
          }))]
        }))]
      })), tabs && jsx("div", Object.assign({
        className: clsx(classes.sideGutters, classes.tabs, classes.clearMargin)
      }, {
        children: tabs
      })), leftContextActions && jsx("div", Object.assign({
        className: clsx(classes.sideGutters, classes.leftItems)
      }, {
        children: leftContextActions
      })), centerContextActions && jsx("div", Object.assign({
        className: clsx(classes.sideGutters, classes.centerItems)
      }, {
        children: centerContextActions
      })), jsxs("div", Object.assign({
        ref: ref,
        className: clsx(classes.sideGutters, classes.rightItems)
      }, {
        children: [children, children && jsx(Divider, {
          className: classes.divider,
          orientation: "vertical",
          variant: "middle"
        }), appActions && appActions, !phone && (workerImage || jsx(IconButton, Object.assign({
          className: classes.icons,
          "aria-label": "user"
        }, {
          children: jsx(PersonIcon, {})
        })))]
      }))]
    }))
  }));
}; // export const AppBar_ = (props: FullAppBarProps) => (

const useStyles$5 = makeStyles$1(theme => createStyles$1({
  AppBar: ({
    color
  }) => ({
    [theme.breakpoints.down('sm')]: {
      height: '100%'
    },
    backgroundColor: color ? '' : geodeColors.coolGray[90],
    flexGrow: 1,
    height: 64
  }),
  clearMargin: {
    margin: 0
  },
  divider: ({
    height
  }) => ({
    backgroundColor: 'rgba(137, 155, 168, 0.20)',
    height
  }),
  leftItems: {
    [theme.breakpoints.down('sm')]: {
      gridArea: 'left-items'
    },
    display: 'flex',
    flexGrow: 1,
    justifyContent: 'flex-start'
  },
  menuButton: {
    [theme.breakpoints.down('sm')]: {
      gridArea: 'menu-button',
      margin: 0
    },
    marginRight: theme.spacing(4)
  },
  rightItems: {
    [theme.breakpoints.down('sm')]: {
      gridArea: 'right-items'
    },
    alignItems: 'center',
    display: 'flex',
    flexGrow: 1,
    justifyContent: 'flex-end',
    marginLeft: theme.spacing(2)
  },
  tabs: {
    [theme.breakpoints.down('xs')]: {
      '& .MuiTabs-flexContainer': {
        height: '100%',
        marginLeft: 'calc(100vw - 50vw)'
      },
      gridArea: 'tabs',
      margin: 0
    },
    '& .MuiTabs-flexContainer': {
      height: '100%'
    },
    display: 'flex',
    flexGrow: 1,
    height: '100%',
    justifyContent: 'flex-start',
    marginLeft: theme.spacing(2),
    maxWidth: 750
  },
  toolBar: ({
    tabs
  }) => ({
    [theme.breakpoints.down('xs')]: tabs ? {
      display: 'grid',
      minHeight: 112,
      gridTemplateColumns: '48px 1fr 1fr',
      gridTemplateAreas: `
              'menu-button left-items right-items'
              'tabs tabs tabs'
              `
    } : {}
  }),
  sideGutters: {
    padding: theme.spacing(0, 2, 0, 4)
  }
}));

const GeodeAppBar = _a => {
  var {
    appActions,
    children,
    color,
    leftContextActions,
    onRailToggle,
    railOrientation = 'vertical',
    tabs,
    workerImage
  } = _a,
      rest = __rest(_a, ["appActions", "children", "color", "leftContextActions", "onRailToggle", "railOrientation", "tabs", "workerImage"]);

  const {
    ref,
    height = 1
  } = useResizeObserver();
  const classes = useStyles$5({
    color,
    height,
    tabs
  });
  return jsx(AppBar, Object.assign({}, rest, {
    color: color,
    className: classes.AppBar
  }, {
    children: jsxs(Toolbar, Object.assign({
      className: clsx(classes.toolBar, classes.sideGutters)
    }, {
      children: [railOrientation === 'vertical' && jsx(GeodeTooltip, Object.assign({
        title: 'Toggle Rail Collapse'
      }, {
        children: jsx(IconButton, Object.assign({
          edge: 'start',
          className: classes.menuButton,
          color: 'inherit',
          "aria-label": 'menu',
          onClick: onRailToggle
        }, {
          children: jsx(MenuIcon, {})
        }))
      })), tabs && jsx("div", Object.assign({
        className: clsx(classes.tabs, classes.clearMargin)
      }, {
        children: tabs
      })), leftContextActions && jsx("div", Object.assign({
        className: classes.leftItems
      }, {
        children: leftContextActions
      })), jsxs("div", Object.assign({
        ref: ref,
        className: classes.rightItems
      }, {
        children: [children, children && jsx(Divider, {
          className: classes.divider,
          orientation: 'vertical',
          variant: 'middle'
        }), appActions && appActions, workerImage || jsx(IconButton, Object.assign({
          color: 'inherit',
          "aria-label": 'user'
        }, {
          children: jsx(PersonIcon, {})
        }))]
      }))]
    }))
  }));
};

const drawerWidth = 240;
const useStyles$4 = makeStyles$1(theme => createStyles$1({
  appBar: {
    bottom: 0,
    top: 'auto'
  },
  appName: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  drawer: {
    [theme.breakpoints.down('sm')]: {
      zIndex: 15000
    },
    whiteSpace: 'nowrap',
    width: drawerWidth
  },
  drawerClose: {
    [theme.breakpoints.up('sm')]: {
      width: theme.spacing(9) + 1
    },
    [theme.breakpoints.down('sm')]: {
      width: 0
    },
    border: 'none',
    overflowX: 'hidden',
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    }),
    width: theme.spacing(7) + 1
  },
  drawerContainer: {
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.text.primary,
    display: 'grid',
    gridTemplateRows: '64px auto',
    height: '100%'
  },
  drawerOpen: {
    border: 'none',
    overflowX: 'hidden',
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen
    }),
    width: drawerWidth
  },
  drawerPaper: {
    width: drawerWidth
  },
  gutters: {
    padding: theme.spacing(0, 3)
  },
  headerContainer: ({
    onLogoClick
  }) => ({
    alignItems: 'center',
    backgroundColor: theme.palette.background.default,
    borderBottom: theme.palette.borders.divider,
    cursor: onLogoClick ? 'pointer' : 'auto',
    display: 'flex',
    flex: '1 1 auto',
    padding: theme.spacing(2)
  }),
  horizontalDrawerContainer: {
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.text.primary,
    display: 'flex',
    height: 72,
    justifyContent: 'space-between'
  },
  horizontalHeaderContainer: ({
    onLogoClick
  }) => ({
    alignItems: 'center',
    cursor: onLogoClick ? 'pointer' : 'auto',
    display: 'flex',
    justifyContent: 'flex-start',
    maxWidth: 150,
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    width: '100%'
  }),
  horizontalLogo: {
    position: 'relative',
    textAlign: 'left',
    textDecoration: 'none'
  },
  horizontalNavItemsContainer: {
    display: 'flex',
    overflow: 'hidden',
    overflowX: 'auto'
  },
  logoContainer: {
    display: 'flex',
    margin: theme.spacing(0, 1.25, 0, 1.25)
  },
  navItemsContainer: {
    boxSizing: 'border-box',
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    justifyContent: 'space-between',
    overflow: 'hidden',
    overflowY: 'auto'
  }
}));

const GeodeRail = _a => {
  var {
    appName,
    children,
    helperActions,
    logo,
    onClose,
    onLogoClick,
    open,
    orientation = 'vertical',
    variant
  } = _a,
      rest = __rest(_a, ["appName", "children", "helperActions", "logo", "onClose", "onLogoClick", "open", "orientation", "variant"]);

  const classes = useStyles$4({
    onLogoClick,
    orientation
  });
  return jsxs("nav", Object.assign({
    className: classes.drawer
  }, {
    children: [orientation === 'horizontal' && jsx(AppBar, Object.assign({
      position: "fixed",
      className: classes.appBar
    }, {
      children: jsxs(Toolbar, Object.assign({
        className: classes.horizontalDrawerContainer
      }, {
        children: [jsxs("div", Object.assign({
          className: clsx({
            [classes.headerContainer]: orientation !== 'horizontal',
            [classes.horizontalHeaderContainer]: orientation === 'horizontal'
          }),
          onClick: onLogoClick
        }, {
          children: [jsx("div", Object.assign({
            className: classes.logoContainer
          }, {
            children: logo || jsx(EogLogoCircleFill, {})
          })), jsx(Typography, Object.assign({
            className: classes.appName,
            variant: "h6"
          }, {
            children: appName || 'EOG'
          }))]
        })), jsx("div", Object.assign({
          className: classes.horizontalNavItemsContainer
        }, {
          children: children
        })), jsx(List, Object.assign({
          className: clsx('Helper-Actions', classes.horizontalNavItemsContainer)
        }, {
          children: helperActions
        }))]
      }))
    })), orientation === 'vertical' && jsxs(Fragment, {
      children: [jsx(Hidden, Object.assign({
        mdUp: true,
        implementation: "js"
      }, {
        children: jsx(Drawer, Object.assign({
          variant: "temporary",
          anchor: "left",
          open: open,
          onClose: onClose,
          classes: {
            paper: classes.drawerPaper
          },
          ModalProps: {
            BackdropProps: {
              invisible: true
            }
          }
        }, {
          children: jsxs("div", Object.assign({
            className: classes.drawerContainer
          }, {
            children: [jsxs("div", Object.assign({
              className: classes.headerContainer,
              onClick: onLogoClick
            }, {
              children: [jsx("div", Object.assign({
                className: classes.logoContainer
              }, {
                children: logo || jsx(EogLogoCircleFill, {})
              })), jsx(Fade, Object.assign({
                in: open
              }, {
                children: jsx(Typography, Object.assign({
                  className: classes.appName,
                  variant: "h6"
                }, {
                  children: appName || 'EOG'
                }))
              }))]
            })), jsxs("div", Object.assign({
              className: classes.navItemsContainer
            }, {
              children: [jsx("div", Object.assign({
                className: "Main-Nav-Items"
              }, {
                children: children
              })), jsx(List, Object.assign({
                className: "Helper-Actions"
              }, {
                children: helperActions
              }))]
            }))]
          }))
        }))
      })), jsx(Hidden, Object.assign({
        xsDown: true,
        implementation: "js"
      }, {
        children: jsx(Drawer // PaperProps={{ onClick: onClose as unknown as any }}
        , Object.assign({
          // PaperProps={{ onClick: onClose as unknown as any }}
          variant: variant || 'permanent',
          className: clsx({
            [classes.drawerOpen]: open,
            [classes.drawerClose]: !open
          }),
          classes: {
            paper: clsx({
              [classes.drawerOpen]: open,
              [classes.drawerClose]: !open
            })
          }
        }, rest, {
          onClose: onClose,
          ModalProps: {
            keepMounted: true,
            BackdropProps: {
              invisible: true
            }
          }
        }, {
          children: jsxs("div", Object.assign({
            className: classes.drawerContainer
          }, {
            children: [jsxs("div", Object.assign({
              className: classes.headerContainer,
              onClick: onLogoClick
            }, {
              children: [jsx("div", Object.assign({
                className: classes.logoContainer
              }, {
                children: logo || jsx(EogLogoCircleFill, {})
              })), jsx(Fade, Object.assign({
                in: open
              }, {
                children: jsx(Typography, Object.assign({
                  className: classes.appName,
                  variant: "h6"
                }, {
                  children: appName || 'EOG'
                }))
              }))]
            })), jsxs("div", Object.assign({
              className: classes.navItemsContainer
            }, {
              children: [jsx("div", Object.assign({
                className: "Main-Nav-Items"
              }, {
                children: children
              })), jsx(List, Object.assign({
                className: "Helper-Actions"
              }, {
                children: helperActions
              }))]
            }))]
          }))
        }))
      }))]
    })]
  }));
};

const useStyles$3 = makeStyles(theme => createStyles({
  verticalStepper: {
    '& .MuiStepConnector-vertical': {
      marginLeft: '18px'
    },
    '& .MuiStepConnector-lineVertical': {
      minHeight: '16px'
    },
    '& span.MuiStepLabel-iconContainer > div.MuiAvatar-root, svg.MuiStepIcon-root': {
      borderRadius: '1000px',
      marginLeft: '8px',
      width: '20px',
      height: '20px',
      '& > .MuiSvgIcon-root': {
        width: '13.33px',
        height: '13.33px',
        transform: 'translateX(-0.5px)'
      }
    },
    '& span.MuiStepLabel-iconContainer > svg.MuiSvgIcon-root:not(.MuiStepIcon-active, .MuiStepIcon-completed) > .MuiStepIcon-text': {
      fill: theme.palette.text.primary,
      fontSize: '11px',
      fontWeight: 500,
      lineHeight: '16px',
      letterSpacing: '0.4px'
    },
    '& .MuiStep-root': {
      whiteSpace: 'nowrap'
    }
  },
  verticalStepperIconNotActive: {
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.text.primary,
    border: `1px solid ${theme.palette.stroke.stroke}`,
    boxSizing: 'border-box'
  },
  stepper: {
    // optional
    '& span.MuiStepLabel-labelContainer > p.MuiTypography-root': {
      fontSize: '11px',
      lineHeight: '16px'
    },
    '& .MuiStepConnector-root .MuiStepConnector-line ': {
      borderColor: theme.palette.stroke.divider
    },
    '& .MuiStepConnector-horizontal': {
      padding: '0px 8px'
    },
    '& .MuiStepConnector-vertical': {
      padding: '2px 0px'
    }
  },
  stepOptionalError: {
    // optional
    '& span.MuiStepLabel-labelContainer > p.MuiTypography-root': {
      color: theme.palette.error.main
    }
  },
  stepVerticalComplete: {
    display: 'flex',
    alignItems: 'center',
    '& > *:last-child': {
      marginLeft: 'auto',
      marginRight: '13.67px',
      scale: 0.7
    }
  },
  stepVerticalButtonActive: {
    '& .MuiStepLabel-root': {
      backgroundColor: theme.palette.primary.hover,
      borderRadius: '4px'
    }
  },
  stepVerticalLabelActive: {
    backgroundColor: theme.palette.primary.hover,
    borderRadius: '4px'
  },
  stepLabel: {
    padding: '6px 0px'
  },
  stepButton: {
    '& .MuiStepLabel-root': {
      padding: '6px 0px'
    }
  },
  horizontalStepButton: {
    width: 'auto',
    padding: '0px',
    margin: '0px',
    borderRadius: '4px',
    '& .MuiStepLabel-horizontal': {
      padding: '6px 8px'
    }
  },
  verticalStepButton: {
    padding: '0px',
    width: '-webkit-fill-available',
    margin: '0px',
    borderRadius: '4px',
    '& .MuiStepLabel-root.MuiStepLabel-vertical .MuiTypography-root.MuiStepLabel-label.MuiStepLabel-completed': {
      display: 'flex',
      alignItems: 'center'
    },
    '& .MuiStepLabel-root.MuiStepLabel-vertical .MuiTypography-root.MuiStepLabel-label.MuiStepLabel-completed .MuiSvgIcon-root': {
      color: theme.palette.success.main,
      width: '20px',
      height: '20px',
      marginLeft: 'auto',
      marginRight: '13.67px'
    },
    '& .MuiStepLabel-root.MuiStepLabel-vertical': {
      width: '100%'
    },
    '& .MuiStepLabel-labelContainer > *': {
      display: 'flex'
    }
  },
  verticalStepLabel: {
    '& .MuiTypography-root.MuiStepLabel-label.MuiStepLabel-completed': {
      display: 'flex',
      alignItems: 'center'
    },
    '& .MuiTypography-root.MuiStepLabel-label.MuiStepLabel-completed .MuiSvgIcon-root': {
      color: theme.palette.success.main,
      width: '20px',
      height: '20px',
      marginLeft: 'auto',
      marginRight: '13.67px'
    },
    width: '100%',
    '& .MuiStepLabel-labelContainer > *': {
      display: 'flex'
    }
  },
  verticalStepButtonOptional: {
    '& .MuiStepLabel-root.MuiStepLabel-vertical .MuiTypography-root.MuiStepLabel-label.MuiStepLabel-completed .MuiSvgIcon-root': {
      transform: 'translateY(12.5px)'
    },
    '& .MuiTypography-root.MuiStepLabel-label.MuiStepLabel-completed .MuiSvgIcon-root': {
      transform: 'translateY(12.5px)'
    }
  },
  verticalStepActive: {
    '&.MuiStep-completed  > *:not(.Mui-error) .MuiStepLabel-labelContainer span.MuiTypography-root': {
      fontWeight: 500,
      color: theme.palette.primary
    }
  },
  verticalStepNotActive: {
    '&.MuiStep-completed  > *:not(.Mui-error) .MuiStepLabel-labelContainer span.MuiTypography-root': {
      fontWeight: 500,
      color: theme.palette.text.secondary
    }
  },
  horizontalStep: {
    '&.MuiStep-root.MuiStep-horizontal.MuiStep-alternativeLabel': {
      display: 'flex',
      justifyContent: 'center'
    }
  },
  horizontalStepActive: {
    // error
    '& .Mui-error .MuiAvatar-root': {
      color: theme.palette.common.white,
      backgroundColor: theme.palette.error.main
    },
    // complete
    '& .MuiStepLabel-labelContainer span.MuiTypography-root': {
      fontWeight: 500
    }
  },
  horizontalStepNotActive: {
    // error
    '& .Mui-error .MuiAvatar-root': {
      color: theme.palette.error.main,
      backgroundColor: theme.palette.error.focused
    },
    // complete
    '&.MuiStep-completed  > *:not(.Mui-error) .MuiStepLabel-iconContainer .MuiSvgIcon-root': {
      fill: theme.palette.success.main
    },
    '&.MuiStep-completed  > *:not(.Mui-error) .MuiStepLabel-labelContainer span.MuiTypography-root': {
      color: theme.palette.text.secondary
    },
    '& .MuiStepLabel-labelContainer span.MuiTypography-root': {
      fontWeight: 400
    },
    // optional
    '&.MuiStep-completed  > *:not(.Mui-error) .MuiStepLabel-labelContainer p.MuiTypography-root': {
      color: theme.palette.text.secondary
    }
  },
  stepOptionalNotActive: {
    '& span.MuiStepLabel-labelContainer > p.MuiTypography-root': {
      color: theme.palette.text.secondary
    }
  },
  // horizontal
  horizontalStepper: {
    // step label
    '& .MuiStep-horizontal': {
      padding: '0px'
    },
    // step button
    '& .MuiStepIcon-completed': {
      color: theme.palette.success.main
    },
    // alternative label
    '& .MuiStep-horizontal.MuiStep-alternativeLabel .MuiStepLabel-horizontal .MuiStepLabel-labelContainer': {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center'
    },
    '& .MuiStep-horizontal:not(.MuiStep-alternativeLabel) .MuiStepLabel-horizontal .MuiStepLabel-labelContainer': {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start'
    }
  },
  horizontalStepperIconNotActive: {
    '& .MuiStepLabel-iconContainer .MuiStepIcon-root': {
      color: setOpacity(theme.palette.customUI.main, 0.25),
      '& .MuiStepIcon-text': {
        fill: theme.palette.customUI.main
      }
    }
  },
  stepLabelAndSubtitleCompleteNotActive: () => ({
    '& .MuiStepLabel-labelContainer > span.MuiTypography-root': {
      fontWeight: 'normal',
      color: theme.palette.text.secondary
    },
    '& .MuiStepLabel-labelContainer > p.MuiTypography-root ': {
      color: theme.palette.text.secondary,
      fontWeight: 'normal'
    }
  })
})); // step

const GeodeStep = _a => {
  var {
    children
  } = _a,
      rest = __rest(_a, ["children"]);

  const classes = useStyles$3({});
  return jsx(Step, Object.assign({}, rest, {
    classes: {
      horizontal: clsx(classes.horizontalStep, rest.active ? classes.horizontalStepActive : classes.horizontalStepNotActive),
      vertical: clsx(rest.active ? classes.verticalStepActive : classes.verticalStepNotActive)
    },
    className: clsx({
      [classes.stepOptionalNotActive]: !rest.completed && !rest.active
    })
  }, {
    children: children
  }));
};

const GeodeStepLabel = _a => {
  var _b;

  var {
    children
  } = _a,
      rest = __rest(_a, ["children"]);

  const classes = useStyles$3({
    error: rest.error
  });
  const theme = useTheme();
  return rest.orientation === 'vertical' ? jsxs(StepLabel, Object.assign({}, rest, {
    className: clsx(classes.stepLabel, classes.verticalStepLabel, {
      [classes.verticalStepButtonOptional]: rest.optional,
      [classes.stepVerticalLabelActive]: rest.active
    }),
    icon: rest.error ? jsx(GeodeBadge$1, {
      icon: jsx(ExclamationmarkTriangleFill, {}),
      color: theme.palette.error.main,
      size: "small"
    }) : jsx(GeodeBadge$1, {
      className: clsx({
        [classes.verticalStepperIconNotActive]: rest.error,
        [classes.verticalStepperIconNotActive]: !rest.active
      }),
      name: ((_b = rest.icon) !== null && _b !== void 0 ? _b : 0).toString(),
      color: theme.palette.primary.main,
      size: "small"
    }),
    optional: typeof rest.optional === 'string' ? jsx(Typography, {
      children: rest.optional
    }) : rest.optional
  }, {
    children: [children, rest.completed && rest.orientation === 'vertical' && !rest.error && jsx(SvgIcon, {
      children: jsx(CheckmarkCircleFill, {})
    })]
  })) : rest.error ? jsx(StepLabel, Object.assign({}, rest, {
    icon: jsx(GeodeBadge$1, {
      icon: jsx(ExclamationmarkTriangleFill, {}),
      color: theme.palette.error.main,
      size: "small"
    }),
    optional: typeof rest.optional === 'string' ? jsx(Typography, Object.assign({
      style: {
        color: theme.palette.error.main
      }
    }, {
      children: rest.optional
    })) : rest.optional,
    className: clsx({
      [classes.stepOptionalError]: rest.error
    })
  }, {
    children: children
  })) : rest.completed ? jsx(StepLabel, Object.assign({}, rest, {
    icon: jsx(GeodeBadge$1, {
      icon: jsx(Checkmark, {}),
      color: rest.active ? theme.palette.success.main : setOpacity(theme.palette.success.main, 0.3),
      size: "small"
    }),
    optional: typeof rest.optional === 'string' ? jsx(Typography, {
      children: rest.optional
    }) : rest.optional,
    className: clsx({
      [classes.stepOptionalError]: rest.error
    })
  }, {
    children: children
  })) : jsx(StepLabel, Object.assign({}, rest, {
    optional: typeof rest.optional === 'string' ? jsx(Typography, {
      children: rest.optional
    }) : rest.optional,
    className: clsx({
      [classes.horizontalStepperIconNotActive]: !rest.completed && !rest.active && !rest.error
    })
  }, {
    children: children
  }));
};

const GeodeStepButton = _a => {
  var _b;

  var {
    children
  } = _a,
      rest = __rest(_a, ["children"]);

  const classes = useStyles$3({});
  const theme = useTheme();
  return rest.orientation === 'vertical' ? jsxs(StepButton, Object.assign({}, rest, {
    className: clsx(classes.stepButton, classes.verticalStepButton, {
      [classes.verticalStepButtonOptional]: rest.optional,
      [classes.stepVerticalButtonActive]: rest.active
    }),
    optional: typeof rest.optional === 'string' ? jsx(Typography, {
      children: rest.optional
    }) : rest.optional,
    icon: jsx(GeodeBadge$1, {
      className: clsx({
        [classes.verticalStepperIconNotActive]: !rest.active
      }),
      name: ((_b = rest.icon) !== null && _b !== void 0 ? _b : 0).toString(),
      color: theme.palette.primary.main,
      size: "small"
    })
  }, {
    children: [children, rest.completed && rest.orientation === 'vertical' && jsx(SvgIcon, {
      children: jsx(CheckmarkCircleFill, {})
    })]
  })) : rest.completed ? jsx(StepButton, Object.assign({}, rest, {
    className: clsx(classes.horizontalStepButton, {
      [classes.horizontalStepperIconNotActive]: !rest.completed && !rest.active,
      [classes.stepLabelAndSubtitleCompleteNotActive]: rest.completed && !rest.active
    }),
    optional: typeof rest.optional === 'string' ? jsx(Typography, {
      children: rest.optional
    }) : rest.optional,
    icon: jsx(GeodeBadge$1, {
      icon: jsx(Checkmark, {}),
      color: rest.active ? theme.palette.success.main : setOpacity(theme.palette.success.main, 0.3),
      size: "small"
    })
  }, {
    children: children
  })) : jsx(StepButton, Object.assign({}, rest, {
    className: clsx(classes.horizontalStepButton, {
      [classes.horizontalStepperIconNotActive]: !rest.completed && !rest.active,
      [classes.stepLabelAndSubtitleCompleteNotActive]: rest.completed && !rest.active
    }),
    optional: typeof rest.optional === 'string' ? jsx(Typography, {
      children: rest.optional
    }) : rest.optional
  }, {
    children: children
  }));
};

const GeodeStepper = _a => {
  var {
    children,
    stepObjects,
    activeStep,
    isSkippable = false,
    isShowingContent = false,
    activeStepHandler,
    completedStepHandler
  } = _a,
      rest = __rest(_a, ["children", "stepObjects", "activeStep", "isSkippable", "isShowingContent", "activeStepHandler", "completedStepHandler"]);

  const classes = useStyles$3({
    nonLinear: rest.nonLinear
  });
  return jsx(Stepper, Object.assign({
    activeStep: activeStep,
    classes: {
      vertical: classes.verticalStepper,
      horizontal: classes.horizontalStepper,
      root: classes.stepper
    }
  }, rest, {
    children: children
  }));
};

const fowardRefGeodeStepper = /*#__PURE__*/React.forwardRef((props, ref) => jsx(GeodeStepper, Object.assign({
  ref: ref,
  className: "fowardRefGeodeStepper"
}, props, {
  children: props.children
}))); // export default GeodeStepper;

const useStyles$2 = makeStyles$1(theme => createStyles$1({
  //tabs
  root: ({
    orientation,
    variant,
    centered
  }) => ({
    width: orientation === 'horizontal' ? '100%' : 'max-content',
    height: orientation === 'horizontal' ? 'fit-content' : '100%',
    minHeight: 40,
    minWidth: '20%',
    boxSizing: 'border-box',
    borderBottom: orientation === 'horizontal' ? `1px solid ${theme.palette.stroke.divider}` : 'none',
    borderRight: orientation === 'vertical' ? `1px solid ${theme.palette.stroke.divider}` : 'none',
    justifyContent: variant === 'scrollable' && centered ? 'center' : '',
    '& .MuiTab-root': {
      minWidth: orientation === 'horizontal' ? variant === 'scrollable' ? centered ? '' : 'fit-content' : 'auto' : '100%'
    }
  }),
  scroller: {
    flexGrow: 0
  },
  flexContainer: ({
    orientation
  }) => ({
    alignItems: orientation === 'vertical' ? 'center' : '',
    height: '100%'
  }),
  indicator: {
    display: 'flex',
    justifyContent: 'center',
    backgroundColor: 'transparent',
    '& > span': {
      width: '100%',
      backgroundColor: ({
        indicatorColor
      }) => indicatorColor === 'secondary' ? theme.palette.secondary.main : theme.palette.primary.main
    }
  },
  tab: ({
    size,
    wrapped,
    iconPosition
  }) => ({
    minHeight: iconPosition === 'left' ? size === 'medium' ? 48 : 40 : size === 'medium' ? 64 : 56,
    padding: size === 'medium' ? iconPosition === 'top' ? theme.spacing(1, 2) : theme.spacing(0.75, 2) : theme.spacing(0.75, 1.5),
    fontSize: wrapped ? '' : size === 'medium' ? 16 : 12,
    fontWeight: size === 'medium' ? 400 : 500,
    letterSpacing: size === 'medium' ? '0.15px' : '0.4px',
    lineHeight: size === 'medium' ? '16px' : '12px',
    textTransform: 'none',
    color: theme.palette.customUI.main,
    '& .MuiTab-wrapper > *:first-child': {
      marginBottom: iconPosition === 'left' ? theme.spacing(0.25) : 0
    },
    '&:hover': {
      backgroundColor: theme.palette.customUI.hover
    },
    '&.MuiTab-textColorPrimary.Mui-selected': {
      '&:hover': {
        backgroundColor: getMainColor(theme, {
          hover: true,
          color: 'primary'
        })
      }
    },
    '&.MuiTab-textColorSecondary.Mui-selected': {
      '&:hover': {
        backgroundColor: getMainColor(theme, {
          hover: true,
          color: 'secondary'
        })
      }
    }
  }),
  leftIconWrapper: ({
    size
  }) => ({
    flexDirection: 'row',
    gap: size === 'medium' ? 8 : 6,
    '& .MuiSvgIcon-root': {
      width: size === 'medium' ? 20 : 16,
      height: size === 'medium' ? 20 : 16,
      lineHeight: size === 'medium' ? '20px' : '16px'
    }
  }),
  topIconWrapper: ({
    size
  }) => ({
    flexDirection: 'column',
    gap: size === 'medium' ? 8 : 6,
    fontSize: 12,
    '& .MuiSvgIcon-root': {
      width: size === 'medium' ? 24 : 20,
      height: size === 'medium' ? 24 : 20,
      marginBottom: theme.spacing(1)
    }
  }),
  tabPanelContainer: {
    padding: theme.spacing(2),
    width: '100%'
  }
}));

const GeodeTabs = _a => {
  var {
    children,
    className,
    variant = 'scrollable',
    scrollButtons = 'off',
    orientation = 'horizontal',
    value,
    onChange,
    textColor = 'primary',
    indicatorColor = 'primary',
    TabIndicatorProps,
    centered
  } = _a,
      rest = __rest(_a, ["children", "className", "variant", "scrollButtons", "orientation", "value", "onChange", "textColor", "indicatorColor", "TabIndicatorProps", "centered"]);

  const classes = useStyles$2({
    centered,
    indicatorColor,
    variant,
    orientation
  });
  return jsx(Tabs, Object.assign({
    classes: {
      indicator: classes.indicator,
      flexContainer: classes.flexContainer,
      scroller: clsx({
        [classes.scroller]: variant === 'scrollable' && centered
      })
    },
    className: clsx(classes.root, className),
    variant: variant,
    value: value,
    onChange: onChange,
    textColor: textColor,
    scrollButtons: scrollButtons,
    orientation: orientation,
    TabIndicatorProps: Object.assign(Object.assign({}, TabIndicatorProps), {
      children: jsx("span", {})
    })
  }, rest, {
    children: children
  }));
};

const GeodeTab = _a => {
  var {
    className,
    value,
    label,
    icon,
    size = 'medium',
    iconPosition = 'left',
    wrapped = false,
    disabled = false
  } = _a,
      rest = __rest(_a, ["className", "value", "label", "icon", "size", "iconPosition", "wrapped", "disabled"]);

  const classes = useStyles$2({
    size,
    wrapped,
    iconPosition
  });
  return jsx(Tab, Object.assign({
    className: className,
    classes: {
      root: classes.tab,
      wrapper: clsx({
        [classes.leftIconWrapper]: icon && iconPosition === 'left',
        [classes.topIconWrapper]: icon && iconPosition === 'top'
      })
    },
    label: label,
    icon: icon,
    wrapped: wrapped,
    disabled: disabled,
    value: value,
    id: `geode-tab-${value}`,
    "aria-controls": `geode-tabpanel-${value}`
  }, rest));
};
const GeodeTabPanel = ({
  children,
  className,
  value,
  index
}) => {
  const classes = useStyles$2({});
  return jsx("div", Object.assign({
    role: "tabpanel",
    className: clsx(classes.tabPanelContainer, className),
    hidden: value !== index,
    id: `geode-tabpanel-${index}`,
    "aria-labelledby": `geode-tab-${index}`
  }, {
    children: value === index && children
  }));
};

const useStyles$1 = makeStyles(theme => createStyles({
  treeLeaf: ({
    disabled
  }) => ({
    '& > .MuiTreeItem-content > .MuiTreeItem-label': {
      background: 'transparent !important'
    },
    color: disabled ? theme.palette.text.disabled : theme.palette.customUI.main,
    overflow: 'hidden'
  }),
  group: {
    margin: 0
  },
  content: ({
    size,
    depth
  }) => ({
    paddingRight: size === 'medium' ? theme.spacing(2) : theme.spacing(1.5),
    paddingLeft: size === 'medium' ? theme.spacing(1) + depth * 24 : theme.spacing(0.75) + depth * 20,
    '&:hover': {
      backgroundColor: theme.palette.customUI.hover
    }
  }),
  selected: ({
    withCheckbox
  }) => ({
    '& > .MuiTreeItem-content': {
      backgroundColor: withCheckbox ? 'none' : setOpacity(theme.palette.customUI.main, 0.2)
    }
  }),
  disabled: {
    pointerEvents: 'none',
    cursor: 'default',
    '& .MuiIconButton-root': {
      color: theme.palette.text.disabled
    }
  },
  iconContainer: ({
    size
  }) => ({
    width: size === 'medium' ? 24 : 20,
    height: size === 'medium' ? 24 : 20,
    marginRight: 0,
    '& svg': {
      fontSize: size === 'medium' ? 24 : 20
    }
  }),
  defaultExpandIcon: {
    transform: 'rotate(-90deg)',
    overflow: 'hidden'
  },
  treeItemContainer: ({
    depth,
    size,
    subtitle,
    withCheckbox
  }) => ({
    display: 'flex',
    alignItems: 'center',
    paddingLeft: withCheckbox ? 0 : size === 'medium' ? theme.spacing(1) : theme.spacing(0.75),
    height: subtitle ? size === 'medium' ? 54 : 44 : size === 'medium' ? 40 : 32,
    flex: 1,
    width: depth === 0 ? size === 'medium' ? `calc(100% - 24px)` : `calc(100% - 20px)` : size === 'medium' ? `calc(100% - ${depth * 24}px)` : `calc(100% - ${depth * 18}px)`
  }),
  smallSwitch: {
    padding: theme.spacing(0.75),
    '& svg': {
      width: 20,
      height: 20
    }
  },
  itemContainer: ({
    size
  }) => ({
    display: 'flex',
    flex: 1,
    justifyContent: 'space-between',
    width: size === 'medium' ? `calc(100% - 36px)` : `calc(100% - 32px)`
  }),
  leftInfo: ({
    rightActions
  }) => ({
    display: 'flex',
    alignItems: 'center',
    width: rightActions ? 'inherit' : '-webkit-fill-available',
    minWidth: 40,
    gap: theme.spacing(1)
  }),
  prefix: ({
    size,
    disabled
  }) => ({
    height: size === 'medium' ? 20 : 18,
    width: size === 'medium' ? 20 : 18,
    '& svg': {
      height: size === 'medium' ? 20 : 18,
      width: size === 'medium' ? 20 : 18
    },
    '& .MuiAvatar-root': {
      opacity: disabled ? 0.5 : 1,
      width: size === 'medium' ? 20 : 18,
      height: size === 'medium' ? 20 : 18
    }
  }),
  title: {
    display: 'flex',
    flexDirection: 'column',
    minWidth: 0
  },
  subTitle: {
    fontSize: 11
  },
  titleOverflow: {
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    overflow: 'hidden'
  },
  rightActions: ({
    size,
    disabled
  }) => ({
    display: 'flex',
    flex: '0 0 auto',
    alignItems: 'center',
    gap: theme.spacing(1),
    marginLeft: size === 'medium' ? theme.spacing(1) : theme.spacing(0.75),
    whiteSpace: 'nowrap',
    fontSize: size === 'medium' ? 12 : 11,
    '& .MuiTypography-root': {
      fontSize: size === 'medium' ? 12 : 11
    },
    '& .MuiBadge-root': {
      '& .MuiBadge-badge': {
        opacity: disabled ? 0.5 : 1
      }
    },
    '& svg': {
      height: size === 'medium' ? 20 : 18,
      width: size === 'medium' ? 20 : 18
    },
    '& .MuiIconButton-root': {
      color: 'inherit',
      padding: 0,
      height: size === 'medium' ? 24 : 20,
      width: size === 'medium' ? 24 : 20,
      '& .MuiSvgIcon-root': {
        height: size === 'medium' ? 20 : 18,
        width: size === 'medium' ? 20 : 18
      }
    },
    '& button': {
      height: size === 'medium' ? 24 : 20
    }
  })
}));

const TreeBranch = _a => {
  var {
    children
  } = _a,
      rest = __rest(_a, ["children"]);

  return jsx(TreeView, Object.assign({}, rest, {
    classes: {}
  }, {
    children: children
  }));
};

const TreeLeaf = _a => {
  var {
    icon,
    avatar,
    title,
    subtitle,
    className,
    size = 'medium',
    expandIcon,
    collapseIcon,
    children,
    withCheckbox = false,
    checkboxProps,
    rightActions,
    depth = 0,
    disabled = false
  } = _a,
      rest = __rest(_a, ["icon", "avatar", "title", "subtitle", "className", "size", "expandIcon", "collapseIcon", "children", "withCheckbox", "checkboxProps", "rightActions", "depth", "disabled"]);

  const classes = useStyles$1({
    size,
    subtitle,
    withCheckbox,
    depth,
    rightActions,
    icon,
    disabled
  });
  return jsx(TreeItem, Object.assign({
    collapseIcon: collapseIcon ? collapseIcon : jsx(ArrowVarianceDown, {}),
    className: className,
    expandIcon: expandIcon ? expandIcon : jsx("span", Object.assign({
      className: classes.defaultExpandIcon
    }, {
      children: jsx(ArrowVarianceDown, {})
    })),
    icon: undefined,
    endIcon: undefined,
    label: jsxs(Fragment, {
      children: [withCheckbox && jsx(GeodeCheckbox, Object.assign({
        size: size,
        className: clsx({
          [classes.smallSwitch]: size === 'small'
        })
      }, checkboxProps)), jsxs("div", Object.assign({
        className: classes.itemContainer
      }, {
        children: [jsxs("div", Object.assign({
          className: classes.leftInfo
        }, {
          children: [(avatar || icon) && jsx("div", Object.assign({
            className: classes.prefix
          }, {
            children: avatar ? avatar : icon
          })), jsxs("div", Object.assign({
            className: classes.title
          }, {
            children: [title && jsx(Typography, Object.assign({
              variant: size === 'medium' ? 'body2' : 'caption',
              color: disabled ? 'inherit' : 'textPrimary',
              className: clsx(classes.titleOverflow)
            }, {
              children: title
            })), subtitle && jsx(Typography, Object.assign({
              variant: "caption",
              color: disabled ? 'inherit' : 'textSecondary',
              className: clsx(classes.titleOverflow, classes.subTitle)
            }, {
              children: subtitle
            }))]
          }))]
        })), rightActions && jsx("div", Object.assign({
          className: classes.rightActions
        }, {
          children: rightActions
        }))]
      }))]
    })
  }, rest, {
    classes: {
      root: clsx(classes.treeLeaf, {
        [classes.disabled]: disabled
      }),
      group: classes.group,
      content: classes.content,
      iconContainer: classes.iconContainer,
      label: classes.treeItemContainer,
      selected: classes.selected
    }
  }, {
    children: children
  }));
};

function getSnackColor(theme, colorOptions) {
  const {
    color,
    isBackgroundColor
  } = colorOptions;

  if (color) {
    if (isBackgroundColor) {
      return color === 'info' ? theme.palette.miscellaneous.snackBar : theme.palette[color].main;
    }

    return color === 'info' ? theme.palette.type === 'light' ? theme.palette.common.white : theme.palette.common.black : color === 'success' ? '#FFFFFF' : theme.palette[color].contrastText;
  }

  return;
}

const useStyles = makeStyles(theme => createStyles({
  contentRoot: ({
    color
  }) => ({
    width: 344,
    padding: theme.spacing(1, 2),
    color: getSnackColor(theme, {
      color
    }),
    backgroundColor: getSnackColor(theme, {
      isBackgroundColor: true,
      color
    }),
    boxShadow: `0px 1px 10px rgba(0, 0, 0, 0.06), 0px 4px 5px rgba(0, 0, 0, 0.07), 0px 2px 4px rgba(0, 0, 0, 0.1)`
  }),
  contentMessage: {
    display: 'flex',
    gap: theme.spacing(1.5),
    padding: theme.spacing(1, 0),
    '& svg:first-child': {
      width: 20,
      height: 20
    }
  },
  typo: {
    lineHeight: '22px'
  },
  contentAction: ({
    color
  }) => ({
    '& .MuiButtonBase-root': {
      color: color === 'info' ? theme.palette.primary.main : getSnackColor(theme, {
        color
      }),
      '&:hover': {
        backgroundColor: color === 'info' ? setOpacity$1(theme.palette.primary.main, 0.2) : setOpacity$1(getSnackColor(theme, {
          color
        }), 0.2)
      }
    }
  })
}));

const GeodeSnackbar = _a => {
  var {
    children,
    icon,
    message,
    action,
    ContentProps,
    onClose,
    color = 'info',
    anchorOrigin = {
      vertical: 'top',
      horizontal: 'right'
    }
  } = _a,
      rest = __rest(_a, ["children", "icon", "message", "action", "ContentProps", "onClose", "color", "anchorOrigin"]);

  const classes = useStyles({
    color
  });
  return jsx(Snackbar, Object.assign({
    onClose: onClose,
    anchorOrigin: anchorOrigin,
    message: icon || typeof message === 'string' ? jsxs(React.Fragment, {
      children: [icon && icon, typeof message === 'string' && jsx("div", {
        children: message && jsx(Typography, Object.assign({
          variant: "body2",
          className: classes.typo
        }, {
          children: message
        }))
      })]
    }) : message,
    ContentProps: Object.assign({
      classes: {
        root: classes.contentRoot,
        message: clsx({
          [classes.contentMessage]: icon || typeof message === 'string'
        }),
        action: classes.contentAction
      }
    }, ContentProps),
    action: action
  }, rest, {
    children: children
  }));
};

export { AnalysisCard, Autocomplete$1 as Autocomplete, CardDataTile, ChipArray, ClippedDrawer, ClippedRail, CounterField$1 as CounterField, DataContent, DescriptionCard, DropdownButton, FullAppBar, GeodeAppBar, GeodeBadge$1 as GeodeAvatar, GeodeBadge, GeodeButton, GeodeCard, GeodeCheckbox, GeodeChip, GeodeContrastButton, GeodeIconButton$1 as GeodeIconButton, GeodeList, GeodeListItem, GeodeMenu, GeodeMenuItem, GeodeRail, GeodeSlider, GeodeSnackbar, GeodeStep, GeodeStepButton, GeodeStepLabel, fowardRefGeodeStepper as GeodeStepper, GeodeSubMenu, GeodeSwitch, GeodeTab, GeodeTabPanel, GeodeTabs, GeodeToggleButton, HelperNavItem, IdentificationCard, InputControlLabel, NavItem, NavItems, RadioButton, SearchField$1 as SearchField, SegmentedControl, SimpleTile, StatusChip, Tag, TextField$1 as TextField, TileCard, GeodeTooltip as Tooltip, TreeBranch, TreeLeaf, TypographyOverlineSM, UserNavItem, setOpacity };
